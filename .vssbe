{
  "Header": {
    "_": [
      " Current file requires a vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * http://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      "  * http://vssbe.r-eg.net",
      " Feedback: entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "OWPComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DTEComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "RestorePkg",
      "Caption": "To restore packages - nuget etc.",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[\" \n    To restore packages with GetNuTool\n    It's important for packages of solution-level in VS2015\n    https://github.com/NuGet/Home/issues/522\n    \n    TODO: later it can be as part of engine...\n\"]\n#[($([System.Convert]::ToInt32(\"$(VisualStudioVersion.Replace('.', ''))\")) >= 140)\n{\n    #[var msbuild = \"$(MSBuildToolsPath)\\msbuild.exe\"]\n    #[IO scall(#[var msbuild], \"gnt.core /p:ngconfig=\\\".nuget/packages.config\\\"\", 60)]\n}]",
        "Command__": [
          "#[\" ",
          "    To restore packages with GetNuTool",
          "    It's important for packages of solution-level in VS2015",
          "    https://github.com/NuGet/Home/issues/522",
          "    ",
          "    TODO: later it can be as part of engine...",
          "\"]",
          "#[($([System.Convert]::ToInt32(\"$(VisualStudioVersion.Replace('.', ''))\")) >= 140)",
          "{",
          "    #[var msbuild = \"$(MSBuildToolsPath)\\msbuild.exe\"]",
          "    #[IO scall(#[var msbuild], \"gnt.core /p:ngconfig=\\\".nuget/packages.config\\\"\", 60)]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Prepares data",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[\"\n    Prepares data - versions, revBuild & information from git\n\"]\n\n#[var tStart    = $([System.DateTime]::Parse(\"2015/12/05\").ToBinary())]\n#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]\n#[var revBuild  = $([System.TimeSpan]::FromTicks($([MSBuild]::Subtract($(tNow), $(tStart)))).TotalMinutes.ToString(\"0\"))]\n\n#[var tplVersion = #[File get(\"Version.tpl\")]]\n\n#[var pDir          = vsSolutionBuildEvent/]\n#[var pDirBridge    = Bridge/]\n#[var pDirCIM       = CI.MSBuild/]\n#[var pDirDevenv    = Devenv/]\n#[var pDirProvider  = Provider/]\n\n#[var numSBE        = #[File get(\".version\")]]\n#[var numBridge     = #[File get(\"#[var pDirBridge].version\")]]\n#[var numCIM        = #[File get(\"#[var pDirCIM].version\")]]\n#[var numDevenv     = #[File get(\"#[var pDirDevenv].version\")]]\n#[var numProvider   = #[File get(\"#[var pDirProvider].version\")]]\n\n#[\" the 0 number is reserved for patches from external assemblies /see AssemblyInfo \"]\n\n#[var num0Bridge     = #[var numBridge].0]\n#[var num0CIM        = #[var numCIM].0]\n#[var num0Devenv     = #[var numDevenv].0]\n#[var num0Provider   = #[var numProvider].0]\n\n#[var libCore       = #[var numSBE]]\n#[var libCoreInt    = $([System.Convert]::ToInt32(\"$(libCore.Replace('.', '0'))\"))]#[\" v0.12.5 -> 1205 \"]",
        "Command__": [
          "#[\"",
          "    Prepares data - versions, revBuild & information from git",
          "\"]",
          "",
          "#[var tStart    = $([System.DateTime]::Parse(\"2015/12/05\").ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = $([System.TimeSpan]::FromTicks($([MSBuild]::Subtract($(tNow), $(tStart)))).TotalMinutes.ToString(\"0\"))]",
          "",
          "#[var tplVersion = #[File get(\"Version.tpl\")]]",
          "",
          "#[var pDir          = vsSolutionBuildEvent/]",
          "#[var pDirBridge    = Bridge/]",
          "#[var pDirCIM       = CI.MSBuild/]",
          "#[var pDirDevenv    = Devenv/]",
          "#[var pDirProvider  = Provider/]",
          "",
          "#[var numSBE        = #[File get(\".version\")]]",
          "#[var numBridge     = #[File get(\"#[var pDirBridge].version\")]]",
          "#[var numCIM        = #[File get(\"#[var pDirCIM].version\")]]",
          "#[var numDevenv     = #[File get(\"#[var pDirDevenv].version\")]]",
          "#[var numProvider   = #[File get(\"#[var pDirProvider].version\")]]",
          "",
          "#[\" the 0 number is reserved for patches from external assemblies /see AssemblyInfo \"]",
          "",
          "#[var num0Bridge     = #[var numBridge].0]",
          "#[var num0CIM        = #[var numCIM].0]",
          "#[var num0Devenv     = #[var numDevenv].0]",
          "#[var num0Provider   = #[var numProvider].0]",
          "",
          "#[var libCore       = #[var numSBE]]",
          "#[var libCoreInt    = $([System.Convert]::ToInt32(\"$(libCore.Replace('.', '0'))\"))]#[\" v0.12.5 -> 1205 \"]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Version",
      "Caption": "Updating version",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( #[File exists.directory(\".git\")] && #[File exists.file(\"git.exe\", true)] )\n{\n    #[var branchSha1        = #[File sout(\"git\", \"rev-parse --short HEAD\")]]\n    #[var branchName        = #[File sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]\n    #[var branchRevCount    = #[File sout(\"git\", \"rev-list HEAD --count\")]]\n    \n    #[var csVersion = $(tplVersion.Replace(%branchName%, \"$(branchName)\").Replace(%branchSha1%, \"$(branchSha1)\").Replace(%branchRevCount%, \"$(branchRevCount)\"))]\n    \n    #[($(branchName) == \"HEAD\") {\n        #[var branchName = $(APPVEYOR_REPO_BRANCH)]\n    }]\n}\nelse {\n    #[var csVersion = $(tplVersion.Replace(%branchName%, \"-\").Replace(%branchSha1%, \"-\").Replace(%branchRevCount%, \"-\"))]\n}]\n\n\n#[\"\n    Updating version for 'vsSolutionBuildEvent'.\n    \n    Note:\n    * For getting the main project path, sample:\n                    #[var pDir = $($(ProjectDir:$(SolutionName)))]\n\"]\n\n#[var cs        = $(csVersion.Replace(%Version%, \"$(numSBE.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \"\"))]\n#[var cs        = $(cs.Replace(%VersionRevString%, \"$(numSBE).$(revBuild)\").Replace(%VersionString%, \"$(numSBE)\"))]\n#[File write(\"#[var pDir]Version.cs\"):#[var cs]]\n\n\n#[\"\n    .vsixmanifest\n\"]\n\n#[($(Configuration) ~= \"_with_revision\" || $(Configuration) ~= \"CI_\") {\n    #[var numSBE = #[var numSBE].#[var revBuild]]\n}]\n#[File replace.Regexp(\"#[var pDir]/source.extension.vsixmanifest\", \"<Version>[0-9\\.]+</Version>\", \"<Version>#[var numSBE]</Version>\")]",
        "Command__": [
          "#[( #[File exists.directory(\".git\")] && #[File exists.file(\"git.exe\", true)] )",
          "{",
          "    #[var branchSha1        = #[File sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var branchName        = #[File sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var branchRevCount    = #[File sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[var csVersion = $(tplVersion.Replace(%branchName%, \"$(branchName)\").Replace(%branchSha1%, \"$(branchSha1)\").Replace(%branchRevCount%, \"$(branchRevCount)\"))]",
          "    ",
          "    #[($(branchName) == \"HEAD\") {",
          "        #[var branchName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "}",
          "else {",
          "    #[var csVersion = $(tplVersion.Replace(%branchName%, \"-\").Replace(%branchSha1%, \"-\").Replace(%branchRevCount%, \"-\"))]",
          "}]",
          "",
          "",
          "#[\"",
          "    Updating version for 'vsSolutionBuildEvent'.",
          "    ",
          "    Note:",
          "    * For getting the main project path, sample:",
          "                    #[var pDir = $($(ProjectDir:$(SolutionName)))]",
          "\"]",
          "",
          "#[var cs        = $(csVersion.Replace(%Version%, \"$(numSBE.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \"\"))]",
          "#[var cs        = $(cs.Replace(%VersionRevString%, \"$(numSBE).$(revBuild)\").Replace(%VersionString%, \"$(numSBE)\"))]",
          "#[File write(\"#[var pDir]Version.cs\"):#[var cs]]",
          "",
          "",
          "#[\"",
          "    .vsixmanifest",
          "\"]",
          "",
          "#[($(Configuration) ~= \"_with_revision\" || $(Configuration) ~= \"CI_\") {",
          "    #[var numSBE = #[var numSBE].#[var revBuild]]",
          "}]",
          "#[File replace.Regexp(\"#[var pDir]/source.extension.vsixmanifest\", \"<Version>[0-9\\.]+</Version>\", \"<Version>#[var numSBE]</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "VerProjects",
      "Caption": "Versions for subprojects",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[\" TODO: functions or templates (with delay of the evaluation)\n\n currently it can be like this:\n\n    #[var template =\n        ##[var box = \n            #[var cs = $$(...)]\n        ]\n    ]\n    #[var eval = #[var template]]\n    \n    however... it's inconvenient, not useful and unstable (not for all cases) ...\n\"]\n\n#[\"\n    Updating version for 'Bridge'.\n\"]\n\n#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Bridge.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Bridge\"))]\n#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Bridge).$(revBuild)\").Replace(%VersionString%, \"$(num0Bridge)\"))]\n#[File write(\"#[var pDirBridge]Version.cs\"):#[var cs]]\n\n#[\"\n    Updating version for 'CI.MSBuild'.\n\"]\n\n#[var cs    = $(csVersion.Replace(%Version%, \"$(num0CIM.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".CI.MSBuild\"))]\n#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0CIM).$(revBuild)\").Replace(%VersionString%, \"$(num0CIM)\"))]\n#[File write(\"#[var pDirCIM]Version.cs\"):#[var cs]]\n\n#[\"\n    Updating version for 'Devenv'.\n\"]\n\n#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Devenv.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Devenv\"))]\n#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Devenv).$(revBuild)\").Replace(%VersionString%, \"$(num0Devenv)\"))]\n#[File write(\"#[var pDirDevenv]Version.cs\"):#[var cs]]\n\n#[\"\n    Updating version for 'Provider'.\n\"]\n\n#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Provider.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Provider\"))]\n#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Provider).$(revBuild)\").Replace(%VersionString%, \"$(num0Provider)\"))]\n#[File write(\"#[var pDirProvider]Version.cs\"):#[var cs]]",
        "Command__": [
          "#[\" TODO: functions or templates (with delay of the evaluation)",
          "",
          " currently it can be like this:",
          "",
          "    #[var template =",
          "        ##[var box = ",
          "            #[var cs = $$(...)]",
          "        ]",
          "    ]",
          "    #[var eval = #[var template]]",
          "    ",
          "    however... it's inconvenient, not useful and unstable (not for all cases) ...",
          "\"]",
          "",
          "#[\"",
          "    Updating version for 'Bridge'.",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Bridge.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Bridge\"))]",
          "#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Bridge).$(revBuild)\").Replace(%VersionString%, \"$(num0Bridge)\"))]",
          "#[File write(\"#[var pDirBridge]Version.cs\"):#[var cs]]",
          "",
          "#[\"",
          "    Updating version for 'CI.MSBuild'.",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(%Version%, \"$(num0CIM.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".CI.MSBuild\"))]",
          "#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0CIM).$(revBuild)\").Replace(%VersionString%, \"$(num0CIM)\"))]",
          "#[File write(\"#[var pDirCIM]Version.cs\"):#[var cs]]",
          "",
          "#[\"",
          "    Updating version for 'Devenv'.",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Devenv.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Devenv\"))]",
          "#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Devenv).$(revBuild)\").Replace(%VersionString%, \"$(num0Devenv)\"))]",
          "#[File write(\"#[var pDirDevenv]Version.cs\"):#[var cs]]",
          "",
          "#[\"",
          "    Updating version for 'Provider'.",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(%Version%, \"$(num0Provider.Replace('.', ', ')), $(revBuild)\").Replace(%namespace%, \".Provider\"))]",
          "#[var cs    = $(cs.Replace(%VersionRevString%, \"$(num0Provider).$(revBuild)\").Replace(%VersionString%, \"$(num0Provider)\"))]",
          "#[File write(\"#[var pDirProvider]Version.cs\"):#[var cs]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "Tests",
      "Caption": "Run all tests for release configurations",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": [
          {
            "Project": "vsSolutionBuildEvent",
            "Order": "After"
          }
        ]
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[($([System.Convert]::ToInt32(\"$(VisualStudioVersion.Replace('.', ''))\")) < 120) {\n    #[($(Configuration) ^= \"Release\" && !$(Configuration) ^= \"CI_\") {\n        #[DTE exec: Test.RunAllTestsInSolution]\n    }]\n}]",
        "Command__": [
          "#[($([System.Convert]::ToInt32(\"$(VisualStudioVersion.Replace('.', ''))\")) < 120) {",
          "    #[($(Configuration) ^= \"Release\" && !$(Configuration) ^= \"CI_\") {",
          "        #[DTE exec: Test.RunAllTestsInSolution]",
          "    }]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Definitions for POST",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var appzip    = $(SolutionDir)bin/7z/7za.exe]\n#[var odir      = $(SolutionDir)bin/Releases/]\n#[var cfg       = #[($(Configuration) ~= \"Release\"){Release}else{Debug}]]\n#[var cfgFull   = $(Configuration)]\n#[var vsixLib   = $(SolutionDir)VsixLib\\bin\\]\n#[var CIMLib    = $(SolutionDir)CIMLib\\bin\\]\n\n#[var netStamp      = net$(TargetFrameworkVersion.Replace(\".\", \"\").Replace(\"v\", \"\"))]\n#[var netVerString  = $(TargetFrameworkVersion)#[($(TargetFrameworkVersion) != v4.0){ (be careful - for complete compatibility with VS2010 it should be v4.0)}]]\n#[var msbuildver    = v$(MSBuildToolsVersion)]\n\n#[File sout(\"cmd\", \"/C mkdir \\\"#[var odir]\\\" 2>&1\")]\n#[File sout(\"cmd\", \"/C del /F/Q \\\"#[var odir]\\\" 2>&1\")]",
        "Command__": [
          "#[var appzip    = $(SolutionDir)bin/7z/7za.exe]",
          "#[var odir      = $(SolutionDir)bin/Releases/]",
          "#[var cfg       = #[($(Configuration) ~= \"Release\"){Release}else{Debug}]]",
          "#[var cfgFull   = $(Configuration)]",
          "#[var vsixLib   = $(SolutionDir)VsixLib\\bin\\]",
          "#[var CIMLib    = $(SolutionDir)CIMLib\\bin\\]",
          "",
          "#[var netStamp      = net$(TargetFrameworkVersion.Replace(\".\", \"\").Replace(\"v\", \"\"))]",
          "#[var netVerString  = $(TargetFrameworkVersion)#[($(TargetFrameworkVersion) != v4.0){ (be careful - for complete compatibility with VS2010 it should be v4.0)}]]",
          "#[var msbuildver    = v$(MSBuildToolsVersion)]",
          "",
          "#[File sout(\"cmd\", \"/C mkdir \\\"#[var odir]\\\" 2>&1\")]",
          "#[File sout(\"cmd\", \"/C del /F/Q \\\"#[var odir]\\\" 2>&1\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ReleaseNotes",
      "Caption": "Release notes",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[File write(\"#[var odir]/Release_notes.txt\"):This assembled from:\n\n* Configuration:   '#[var cfgFull]' (Folders: #[var cfg])\n* .NET version:     #[var netVerString];\n* MSBuild Tools:    #[var msbuildver];\n* Build number:     #[var revBuild];\n* Branch Sha1:      #[var branchSha1];\n* Branch Name:      #[var branchName];\n* Branch revCount:  #[var branchRevCount];\n------------------------------------------\n\nVersions:\n\n* The 'Bridge':                 v#[var numBridge];\n* The 'CI.MSBuild':             v#[var numCIM];\n* The 'Devenv':                 v#[var numDevenv];\n* The 'Provider':               v#[var numProvider];\n* The 'vsSolutionBuildEvent':   v#[var numSBE];\n\nPackages:\n\n* NuGet 'vsSBE.CI.MSBuild': v#[var numCIM].#[var libCoreInt];\n\nDemo:\n\n* ClientDemo - [#[var branchSha1]][#[var netStamp]](#[var revBuild])\n\n------------------------------------------\n         Generated by vsSolutionBuildEvent\n]",
        "Command__": [
          "#[File write(\"#[var odir]/Release_notes.txt\"):This assembled from:",
          "",
          "* Configuration:   '#[var cfgFull]' (Folders: #[var cfg])",
          "* .NET version:     #[var netVerString];",
          "* MSBuild Tools:    #[var msbuildver];",
          "* Build number:     #[var revBuild];",
          "* Branch Sha1:      #[var branchSha1];",
          "* Branch Name:      #[var branchName];",
          "* Branch revCount:  #[var branchRevCount];",
          "------------------------------------------",
          "",
          "Versions:",
          "",
          "* The 'Bridge':                 v#[var numBridge];",
          "* The 'CI.MSBuild':             v#[var numCIM];",
          "* The 'Devenv':                 v#[var numDevenv];",
          "* The 'Provider':               v#[var numProvider];",
          "* The 'vsSolutionBuildEvent':   v#[var numSBE];",
          "",
          "Packages:",
          "",
          "* NuGet 'vsSBE.CI.MSBuild': v#[var numCIM].#[var libCoreInt];",
          "",
          "Demo:",
          "",
          "* ClientDemo - [#[var branchSha1]][#[var netStamp]](#[var revBuild])",
          "",
          "------------------------------------------",
          "         Generated by vsSolutionBuildEvent",
          "]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackBridge",
      "Caption": "Pack 'Bridge'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirBridge]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Bridge_v#[var numBridge]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb\")]",
        "Command__": [
          "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirBridge]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Bridge_v#[var numBridge]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackCIMSBuild",
      "Caption": "Pack 'CI.MSBuild'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirCIM]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]CI.MSBuild_v#[var numCIM]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb Provider.dll Provider.pdb CI.MSBuild.dll CI.MSBuild.pdb\")]",
        "Command__": [
          "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirCIM]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]CI.MSBuild_v#[var numCIM]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb Provider.dll Provider.pdb CI.MSBuild.dll CI.MSBuild.pdb\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackDevenv",
      "Caption": "Pack 'Devenv'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var _DP = $(SolutionDir)$(pDirDevenv)bin\\#[var cfg]\\]\n\n#[IO cmd(\"del /F/Q \\\"#[var _DP]\\Devenv\\\" 2>&1\")]\n#[IO cmd(\"cd \\\"#[var _DP]/\\\" & for %f in (Bridge.dll,Bridge.pdb,Devenv.dll,Devenv.pdb,Provider.dll,Provider.pdb) do xcopy %f Devenv\\ /Y/R/I\")]\n#[IO cmd(\"cd \\\"#[var _DP]/\\\" & xcopy Extensibility.dll Devenv\\ /Y/R/I 2>&1\")]\n\n#[IO cmd(\"cd \\\"#[var _DP]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Devenv_v#[var numDevenv]_[#[var branchSha1]][#[var netStamp]].zip\\\" Devenv.AddIn Devenv/*.*\")]",
        "Command__": [
          "#[var _DP = $(SolutionDir)$(pDirDevenv)bin\\#[var cfg]\\]",
          "",
          "#[IO cmd(\"del /F/Q \\\"#[var _DP]\\Devenv\\\" 2>&1\")]",
          "#[IO cmd(\"cd \\\"#[var _DP]/\\\" & for %f in (Bridge.dll,Bridge.pdb,Devenv.dll,Devenv.pdb,Provider.dll,Provider.pdb) do xcopy %f Devenv\\ /Y/R/I\")]",
          "#[IO cmd(\"cd \\\"#[var _DP]/\\\" & xcopy Extensibility.dll Devenv\\ /Y/R/I 2>&1\")]",
          "",
          "#[IO cmd(\"cd \\\"#[var _DP]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Devenv_v#[var numDevenv]_[#[var branchSha1]][#[var netStamp]].zip\\\" Devenv.AddIn Devenv/*.*\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackProvider",
      "Caption": "Pack 'Provider'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirProvider]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Provider_v#[var numProvider]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb Provider.dll Provider.pdb\")]",
        "Command__": [
          "#[File sout(\"cmd\", \"/C cd \\\"#[var pDirProvider]bin/#[var cfg]/\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]Provider_v#[var numProvider]_[#[var branchSha1]][#[var netStamp]].zip\\\" Bridge.dll Bridge.pdb Provider.dll Provider.pdb\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackVSSBE",
      "Caption": "Pack 'vsSBE'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[File sout(\"cmd\", \"/C copy \\\"#[var pDir]bin\\#[var cfg]\\vsSolutionBuildEvent.vsix\\\" \\\"#[var odir]vsSolutionBuildEvent_v#[var numSBE]_[#[var branchSha1]][#[var netStamp]].vsix\\\" /Y/V/B\")]",
        "Command__": [
          "#[File sout(\"cmd\", \"/C copy \\\"#[var pDir]bin\\#[var cfg]\\vsSolutionBuildEvent.vsix\\\" \\\"#[var odir]vsSolutionBuildEvent_v#[var numSBE]_[#[var branchSha1]][#[var netStamp]].vsix\\\" /Y/V/B\")]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "VerCIMPrompt",
      "Caption": "Gets next number for package from official nuget server",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": true,
      "ToConfiguration": [
        "Release_with_revision|Any CPU",
        "Release_with_revision|Mixed Platforms",
        "Release_with_revision|x86",
        "Release|Any CPU",
        "Release|Mixed Platforms",
        "Release|x86"
      ],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[($(Configuration) ~= \"Release\" && !$(Configuration) ~= \"CI_\") {\n    #[var numCIMPackage = $([MSBuild]::Add(#[File sout(\"cmd\", \"/C .nuget\\nuget.exe list vsSBE.CI.MSBuild | grep 'vsSBE.CI.MSBuild' | sed -r 's/^.*\\s[0-9]+\\.[0-9]+\\.//'\")], 1))]\n}\nelse{\n    #[var numCIMPackage = 0]\n}]",
        "Command__": [
          "#[($(Configuration) ~= \"Release\" && !$(Configuration) ~= \"CI_\") {",
          "    #[var numCIMPackage = $([MSBuild]::Add(#[File sout(\"cmd\", \"/C .nuget\\nuget.exe list vsSBE.CI.MSBuild | grep 'vsSBE.CI.MSBuild' | sed -r 's/^.*\\s[0-9]+\\.[0-9]+\\.//'\")], 1))]",
          "}",
          "else{",
          "    #[var numCIMPackage = 0]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "NuGetCIM",
      "Caption": "NuGet pack - CI.MSBuild",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var tplNuspec = #[File get(\"vsSBE.CI.MSBuild.nuspec.tpl\")]]\n#[var nupCIMdir = $(odir)NuGet-CI.MSBuild-package]\n#[var msbuild   = $(MSBuildToolsPath)\\msbuild.exe]\n\n#[File sout(\"cmd\", \"/C mkdir \\\"#[var nupCIMdir]\\\" 2>&1\")]\n#[File sout(\"cmd\", \"/C del /F/Q \\\"#[var nupCIMdir]\\\" & del /F/Q \\\"#[var nupCIMdir]\\bin\\\" 2>&1\")]\n\n#[var nuspec = $(tplNuspec.Replace(\"%CIM%\", \"$(numCIM)\").Replace(\"%Lib%\", \"$(libCoreInt)\").Replace(\"%vsSBE%\", \"$(numSBE)\"))]\n#[File write(\"#[var nupCIMdir]\\vsSBE.CI.MSBuild.nuspec\"):#[var nuspec]]\n\n#[\" files for package \"]\n\n#[File cmd(\"cd \\\"#[var CIMLib]\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]#[\" CIMLib custom \"]\n\n#[\" vsix dir \"]\n#[File cmd(\"cd \\\"#[var pDir]bin/#[var cfg]/\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]\n#[File cmd(\"cd \\\"#[var pDirCIM]bin/#[var cfg]/\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]\n#[File scall(\"#[var msbuild]\", \"gnt.core /t:pack /p:ngin=\\\"#[var nupCIMdir]\\\" /p:ngout=\\\"#[var odir]\\\"\")]\n\n#[File sout(\"cmd\", \"/C rmdir /S/Q \\\"#[var nupCIMdir]\\\" 2>&1\")]",
        "Command__": [
          "#[var tplNuspec = #[File get(\"vsSBE.CI.MSBuild.nuspec.tpl\")]]",
          "#[var nupCIMdir = $(odir)NuGet-CI.MSBuild-package]",
          "#[var msbuild   = $(MSBuildToolsPath)\\msbuild.exe]",
          "",
          "#[File sout(\"cmd\", \"/C mkdir \\\"#[var nupCIMdir]\\\" 2>&1\")]",
          "#[File sout(\"cmd\", \"/C del /F/Q \\\"#[var nupCIMdir]\\\" & del /F/Q \\\"#[var nupCIMdir]\\bin\\\" 2>&1\")]",
          "",
          "#[var nuspec = $(tplNuspec.Replace(\"%CIM%\", \"$(numCIM)\").Replace(\"%Lib%\", \"$(libCoreInt)\").Replace(\"%vsSBE%\", \"$(numSBE)\"))]",
          "#[File write(\"#[var nupCIMdir]\\vsSBE.CI.MSBuild.nuspec\"):#[var nuspec]]",
          "",
          "#[\" files for package \"]",
          "",
          "#[File cmd(\"cd \\\"#[var CIMLib]\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]#[\" CIMLib custom \"]",
          "",
          "#[\" vsix dir \"]",
          "#[File cmd(\"cd \\\"#[var pDir]bin/#[var cfg]/\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]",
          "#[File cmd(\"cd \\\"#[var pDirCIM]bin/#[var cfg]/\\\" & xcopy *.dll \\\"#[var nupCIMdir]\\bin\\\" /Y/R/I\")]",
          "#[File scall(\"#[var msbuild]\", \"gnt.core /t:pack /p:ngin=\\\"#[var nupCIMdir]\\\" /p:ngout=\\\"#[var odir]\\\"\")]",
          "",
          "#[File sout(\"cmd\", \"/C rmdir /S/Q \\\"#[var nupCIMdir]\\\" 2>&1\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackClientDemo",
      "Caption": "Pack 'ClientDemo'",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var clientDemoDir  = ClientDemo/bin/#[var cfg]/]\n#[File sout(\"cmd\", \"/C cd \\\"#[var clientDemoDir]\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]ClientDemo_[#[var branchSha1]][#[var netStamp]](#[var revBuild]).zip\\\" Bridge.dll Bridge.pdb client.vssbe.dll client.vssbe.pdb\")]",
        "Command__": [
          "#[var clientDemoDir  = ClientDemo/bin/#[var cfg]/]",
          "#[File sout(\"cmd\", \"/C cd \\\"#[var clientDemoDir]\\\" & \\\"#[var appzip]\\\" a \\\"#[var odir]ClientDemo_[#[var branchSha1]][#[var netStamp]](#[var revBuild]).zip\\\" Bridge.dll Bridge.pdb client.vssbe.dll client.vssbe.pdb\")]"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": []
}