{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Init",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "$(revDeltaBase  = \"2016/11/05\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion (2^16 - 2) - i.e. 65534 max allowed \"]",
          "",
          "#[var pDir      = vsCommandEvent/]",
          "#[var odir      = $(SolutionDir)bin/Releases/$(Configuration)/]",
          "#[var cfgSDK    = #[( $(Configuration) =^ \"_SDK15\" ) {15} else {10} ]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActClean",
      "BuildType": "Rebuild",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO delete.directory(\"$(odir)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Prepares data",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "",
          "#[\"",
          "    Prepares data - version, revBuild & information from git",
          "\"]",
          "",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = $([System.TimeSpan]::FromTicks('$([MSBuild]::Subtract($(tNow), $(tBase)))').TotalMinutes.ToString('0'))]",
          "#[var revBuild  = $([MSBuild]::Add($(revDeltaMin), $([MSBuild]::Modulo($(revBuild), $([MSBuild]::Subtract($(revDeltaMax), $(revDeltaMin)))))))]",
          "",
          "#[var tplVersion = #[File get(\"Version.tpl\")]]",
          "",
          "#[var numCE = #[File get(\".version\")]]",
          "",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPackages",
      "Caption": "Submodules and dep packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    ##[File call(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]    ",
          "    ##[File call(\"packages.cmd\", \"\", 1000)]",
          "    ",
          "    #[NuGet gnt.raw(\"/p:wpath=\\\"$(SolutionDir)\\\" /p:ngconfig=\\\".gnt/packages.config;vsCommandEvent/packages.config;vsCommandEventTest/packages.config\\\" \")]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Version",
      "Caption": "Updating version",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1        = #[File sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName        = #[File sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevCount    = #[File sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[var csVersion = $(tplVersion.Replace(%bName%, \"$(bName)\").Replace(%bSha1%, \"$(bSha1)\").Replace(%bRevCount%, \"$(bRevCount)\"))]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "}",
          "else {",
          "    #[var bSha1 =-] #[var bName =-] #[var bRevCount =-]",
          "    #[var csVersion = $(tplVersion.Replace(%bName%, \"-\").Replace(%bSha1%, \"-\").Replace(%bRevCount%, \"-\"))]",
          "}]",
          "",
          "",
          "#[\"",
          "    'vsSolutionBuildEvent' project",
          "\"]",
          "",
          "#[var cs = $(csVersion.Replace(\"%Version%\", \"$(numCE.Replace('.', ', ')), $(revBuild)\").Replace(\"%namespace%\", \"\"))]",
          "#[var cs = $(cs.Replace(\"%VersionRev%\", \"$(revBuild)\").Replace(\"%VersionString%\", \"$(numCE)\"))]",
          "#[File write(\"#[var pDir]Version.cs\"):#[var cs]]",
          "",
          "",
          "#[\"",
          "    .vsixmanifest",
          "\"]",
          "",
          "#[var vsixvnum = #[var numCE]]",
          "",
          "#[( $(Configuration) ^= \"RCI_\" ) {",
          "    #[var numCE = #[var numCE].#[var revBuild]]",
          "}]",
          "",
          "#[File replace.Regexp(\"#[var pDir]/sdk10.vsixmanifest\", \"<Version>[0-9.]+</Version>\", \"<Version>#[var vsixvnum]</Version>\")]",
          "",
          "#[File replace.Regexp(\"#[var pDir]/sdk15.vsixmanifest\", \"(<Identity.*?) Version=\\\"[0-9.]+\\\"\", \"$1 Version=\\\"#[var vsixvnum]\\\"\")]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Fvsixmanifest",
      "Caption": "source.extension.vsixmanifest",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(\"$(pDir)/sdk$(cfgSDK).vsixmanifest\", \"$(pDir)/source.extension.vsixmanifest\", true)]",
          ""
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": false,
      "Name": "Tests",
      "Caption": "Run all tests for release configurations",
      "IgnoreIfBuildFailed": true,
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": [
          {
            "Project": "vsCommandEvent",
            "Order": "After"
          }
        ]
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($([System.Convert]::ToInt32(\"$(VisualStudioVersion.Replace('.', ''))\")) < 120) {",
          "    #[($(Configuration) ^= \"Release\" && !$(Configuration) ^= \"CI_\") {",
          "        #[DTE exec: Test.RunAllTestsInSolution]",
          "    }]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Definitions for POST",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var cfg       = #[( $(Configuration) ^= \"REL_\" || $(Configuration) ^= \"RCI_\" ){Release}else{Debug}]]",
          "#[var cfgFull   = $(Configuration)]",
          "#[var vsixLib   = $(SolutionDir)VsixLib\\bin\\]",
          "",
          "#[var netStamp      = $(NetTargetVName:vsCommandEvent)]",
          "#[var netVerString  = $(TargetFrameworkVersion:vsCommandEvent)]",
          "#[var msbuildver    = v$(MSBuildToolsVersion)]",
          "",
          "",
          "##[IO delete.directory(\"$(odir)\", true)]",
          "#[IO copy.directory(\"\", \"$(odir)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ReleaseNotes",
      "Caption": "Release notes",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[File write(\"$(odir)\\Release-notes.$(bSha1).SDK$(cfgSDK).txt\"):",
          "",
          "* Configuration:   '#[var cfgFull]' ( #[var cfg] );",
          "* SDK base:         #[var cfgSDK];",
          "* .NET version:     #[var netVerString];",
          "* Platform:         #[$(Platform)];",
          "* MSBuild Tools:    #[var msbuildver];",
          "* Build number:     #[var revBuild];",
          "* Branch Sha1:      #[var bSha1];",
          "* Branch Name:      #[var bName];",
          "* Branch revCount:  #[var bRevCount];",
          "* revDeltaBase:     #[$(revDeltaBase)];    ",
          "* revDeltaMin:      #[$(revDeltaMin)];    ",
          "* revDeltaMax:      #[$(revDeltaMax)];",
          "------------------------------------------",
          "",
          "Versions:",
          "",
          "* 'vsCommandEvent': v#[var numCE];",
          "",
          "--------------------------------------------",
          "      :: Generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]  ",
          "--------------------------------------------",
          "https://github.com/3F/vsSolutionBuildEvent",
          "]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackVSCE",
      "Caption": "Pack 'vsSCE'",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(",
          "            \"$(pDir)bin\\$(cfg)\\vsCommandEvent.vsix\", ",
          "            \"$(odir)vsCommandEvent.$(vsixvnum)+$(bSha1).SDK$(cfgSDK).vsix\", ",
          "            true)]"
        ]
      }
    }
  ]
}