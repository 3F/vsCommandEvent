/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EnvDTE80;
using Microsoft.Build.Evaluation;
using Microsoft.Build.Collections;
using Microsoft.VisualStudio.Shell.Interop;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.IO;

namespace net.r_eg.vsSBE
{
    public class MSBuildParser: IMSBuildProperty, ISBEParserScript
    {
        /// <summary>
        /// DTE context
        /// </summary>
        protected DTE2 dte2 = null;

        /// <summary>
        /// Getting name from "Set as SturtUp Project"
        /// </summary>
        protected string StartupProjectString
        {
            get
            {
                foreach(string project in (Array)dte2.Solution.SolutionBuild.StartupProjects)
                {
                    if(String.IsNullOrEmpty(project)) {
                        continue;
                    }
                    return project;
                }
                return null;
            }
        }

        /// <summary>
        /// Work with DTE because the ProjectCollection.GlobalProjectCollection can be is empty
        /// https://bitbucket.org/3F/vssolutionbuildevent/issue/8/
        /// </summary>
        protected IEnumerable<EnvDTE.Project> DTEProjects
        {
            get
            {
                foreach(EnvDTE.Project project in dte2.Solution.Projects)
                {
                    if(String.IsNullOrEmpty(project.FullName) || String.IsNullOrEmpty(project.Name)) {
                        continue;
                    }
                    yield return project;
                }
            }
        }

        protected SolutionConfiguration2 SolutionActiveConfiguration
        {
            get { return (SolutionConfiguration2)dte2.Solution.SolutionBuild.ActiveConfiguration; }
        }

        /// <summary>
        /// object synch.
        /// </summary>
        private Object _eLock = new Object();

        /// <summary>
        /// MSBuild Property from default Project
        /// </summary>
        /// <param name="name">key property</param>
        /// <returns>evaluated value</returns>
        public string getProperty(string name)
        {
            return getProperty(name, null);
        }

        /// <summary>
        /// MSBuild Property from specific project
        /// </summary>
        /// <param name="name">key of property</param>
        /// <param name="projectName">Specific project</param>
        /// <exception cref="MSBuildParserProjectPropertyNotFoundException">problem with getting property</exception>
        /// <returns>Evaluated value of property</returns>
        public string getProperty(string name, string projectName)
        {
            if(projectName == null)
            {
                string slnProp = _getSolutionGlobalProperty(name);
                if(slnProp != null) {
                    Log.nlog.Debug("Solution-context for getProperty - '{0}' = '{1}'", name, slnProp);
                    return slnProp;
                }
            }
            
            Project project         = getProject(projectName);
            ProjectProperty prop    = project.GetProperty(name);

            if(prop != null) {
                return prop.EvaluatedValue;
            }
            throw new MSBuildParserProjectPropertyNotFoundException(String.Format("variable - '{0}' : project - '{1}'", name, (projectName == null) ? "<default>" : projectName));
        }

        public List<MSBuildPropertyItem> listProperties(string projectName = null)
        {
            List<MSBuildPropertyItem> properties = new List<MSBuildPropertyItem>();

            Project project = getProject(projectName);
            foreach(ProjectProperty property in project.Properties)
            {
                string eValue = property.EvaluatedValue;
                if(projectName == null)
                {
                    string slnProp = _getSolutionGlobalProperty(property.Name);
                    if(slnProp != null) {
                        Log.nlog.Debug("Solution-context for listProperties - '{0}' = '{1}'", property.Name, slnProp);
                        eValue = slnProp;
                    }
                }

                properties.Add(new MSBuildPropertyItem(property.Name, eValue));
            }
            return properties;
        }

        public List<string> listProjects()
        {
            List<string> projects = new List<string>();

            foreach(EnvDTE.Project project in DTEProjects) {
                projects.Add(project.Name);
            }
            return projects;
        }

        /// <summary>
        /// Evaluate data with the MSBuild engine
        /// </summary>
        /// <param name="unevaluated">raw string as $(..data..)</param>
        /// <param name="projectName">push null if default</param>
        /// <returns>evaluated value</returns>
        public virtual string evaluateVariable(string unevaluated, string projectName)
        {
            Project project = getProject(projectName);
            lock(_eLock) {
                project.SetProperty("vsSBE_latestEvaluated", unevaluated);
            }
            return project.GetProperty("vsSBE_latestEvaluated").EvaluatedValue;
        }

        /// <summary>
        /// Simple handler properties of MSBuild environment
        /// </summary>
        /// <remarks>deprecated</remarks>
        /// <param name="data">text with $(ident) data</param>
        /// <returns>text with evaluated properties</returns>
        public string parseVariablesMSBuildSimple(string data)
        {
            return Regex.Replace(data, @"
                                         (?<!\$)\$
                                         \(
                                           (?:
                                             (
                                               [^\:\r\n)]+?
                                             )
                                             \:
                                             (
                                               [^)\r\n]+?
                                             )
                                             |
                                             (
                                               [^)]*?
                                             )
                                           )
                                         \)", delegate(Match m)
            {
                // 3   -> $(name)
                // 1,2 -> $(name:project)

                if(m.Groups[3].Success) {
                    return getProperty(m.Groups[3].Value);
                }
                return getProperty(m.Groups[1].Value, m.Groups[2].Value);

            }, RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace).Replace("$$(", "$(");
        }

        public virtual string parseVariablesMSBuild(string data)
        {
            /*
                    (
                      \${1,2}
                    )
                    (?=
                      (
                        \(
                          (?>
                            [^()]
                            |
                            (?2)
                          )*
                        \)
                      )
                    )            -> for .NET: v             
             */
            return Regex.Replace(data,  @"(
                                            \${1,2}
                                          )
                                          (
                                            \(
                                              (?>
                                                [^()]
                                                |
                                                \((?<R>)
                                                |
                                                \)(?<-R>)
                                              )*
                                              (?(R)(?!))
                                            \)
                                          )", delegate(Match m)
            {
                // 1 - $ or $$
                // 2 - (name) or (name:project) or ([MSBuild]::MakeRelative($(path1), ...):project) .. 
                //      http://msdn.microsoft.com/en-us/library/vstudio/dd633440%28v=vs.120%29.aspx

                if(m.Groups[1].Value.Length > 1) { //escape
                    return m.Value.Substring(1);
                }

                string unevaluated  = m.Groups[2].Value;
                string projectName  = _splitGeneralProjectAttr(ref unevaluated);

                if(_isSimpleProperty(ref unevaluated)) {
                    return getProperty(unevaluated, projectName);
                }
                return evaluateVariable(string.Format("$({0})", unevaluated), projectName);
            }, RegexOptions.IgnorePatternWhitespace);
        }


        /// <summary>
        /// All variables which are not included in MSBuild environment.
        /// Customization for our data
        /// </summary>
        /// <param name="data">where to look</param>
        /// <param name="name">we're looking for..</param>
        /// <param name="value">replace with this value if found</param>
        /// <returns></returns>
        public string parseCustomVariable(string data, string name, string value)
        {
            return Regex.Replace(data,  @"(
                                            \${1,2}
                                          )
                                          \(
                                            (
                                              [^)]+?
                                            )
                                          \)", delegate(Match m)
            {
                if(m.Groups[2].Value != name || m.Groups[1].Value.Length > 1) {
                    return m.Value;
                }
                return (value == null)? "" : value;
            }, RegexOptions.IgnorePatternWhitespace);
        }

        /// <param name="dte2">DTE context</param>
        public MSBuildParser(DTE2 dte2)
        {
            this.dte2 = dte2;

#if DEBUG
            string unevaluated = "(name:project)";
            Debug.Assert(_splitGeneralProjectAttr(ref unevaluated).CompareTo("project") == 0);
            Debug.Assert(unevaluated.CompareTo("name") == 0);

            unevaluated = "(name)";
            Debug.Assert(_splitGeneralProjectAttr(ref unevaluated) == null);
            Debug.Assert(unevaluated.CompareTo("name") == 0);

            unevaluated = "([class]::func($(path:project), $([class]::func2($(path2)):project)):project)";
            Debug.Assert(_splitGeneralProjectAttr(ref unevaluated).CompareTo("project") == 0);
            Debug.Assert(unevaluated.CompareTo("[class]::func($(path:project), $([class]::func2($(path2)):project))") == 0);

            unevaluated = "([class]::func($(path:project), $([class]::func2($(path2)):project)):project))";
            Debug.Assert(_splitGeneralProjectAttr(ref unevaluated) == null);
            Debug.Assert(unevaluated.CompareTo("[class]::func($(path:project), $([class]::func2($(path2)):project)):project)") == 0);
#endif
        }

        /// <summary>
        /// Getting the Build.Evaluation.Project for access to properties etc.
        /// if the project as null then selected startup-project in the list or the first with the same Configuration & Platform
        /// </summary>
        /// <param name="project">Specific project</param>
        /// <exception cref="MSBuildParserProjectNotFoundException">something wrong with loaded projects</exception>
        /// <returns>Microsoft.Build.Evaluation.Project</returns>
        protected virtual Project getProject(string project = null)
        {
            EnvDTE.Project selected = null;
            string sturtup          = StartupProjectString;

            if(project == null) {
                Log.nlog.Debug("default project is a '{0}'", sturtup);
            }

            foreach(EnvDTE.Project dteProject in DTEProjects)
            {
                if(project == null && !String.IsNullOrEmpty(sturtup) && !dteProject.UniqueName.Equals(sturtup)) {
                    continue;
                }
                else if(project != null && !dteProject.Name.Equals(project)) {
                    continue;
                }
                selected = dteProject;
                Log.nlog.Trace("selected = dteProject: '{0}'", dteProject.FullName);

                foreach(Project eProject in ProjectCollection.GlobalProjectCollection.LoadedProjects)
                {
                    if(isEquals(dteProject, eProject)) {
                        return eProject;
                    }
                }
                break; // selected & LoadedProjects is empty
            }

            if(selected != null) {
                Log.nlog.Debug("getProject->selected '{0}'", selected.FullName);
                return tryLoadPCollection(selected);
            }
            throw new MSBuildParserProjectNotFoundException(String.Format("not found project: '{0}' [sturtup: '{1}']", project, sturtup));
        }

        protected bool isEquals(EnvDTE.Project dteProject, Project eProject)
        {
            string ePrgName         = eProject.GetPropertyValue("ProjectName");
            string ePrgCfg          = eProject.GetPropertyValue("Configuration");
            string ePrgPlatform     = eProject.GetPropertyValue("Platform");

            string dtePrgName       = dteProject.Name;
            string dtePrgCfg        = dteProject.ConfigurationManager.ActiveConfiguration.ConfigurationName;
            string dtePrgPlatform   = dteProject.ConfigurationManager.ActiveConfiguration.PlatformName;

            Log.nlog.Trace("isEquals for '{0}' : '{1}' [{2} = {3} ; {4} = {5}]",
                            eProject.FullPath, dtePrgName, dtePrgCfg, ePrgCfg, dtePrgPlatform, ePrgPlatform);

            if(dtePrgName.Equals(ePrgName) && dtePrgCfg.Equals(ePrgCfg) && dtePrgPlatform.Equals(ePrgPlatform))
            {
                Log.nlog.Trace("isEquals: matched");
                return true;
            }
            return false;
        }

        /// <summary>
        /// This solution for similar problems - MS Connect Issue #508628:
        /// http://connect.microsoft.com/VisualStudio/feedback/details/508628/
        /// </summary>
        protected Project tryLoadPCollection(EnvDTE.Project dteProject)
        {
            Dictionary<string, string> prop = _getGlobalProperties(dteProject);

            Log.nlog.Debug("tryLoadPCollection :: '{0}' [{1} ; {2}]", dteProject.FullName, prop["Configuration"], prop["Platform"]);
            //ProjectCollection.GlobalProjectCollection.LoadProject(dteProject.FullName, prop, null);
            return new Project(dteProject.FullName, prop, null, ProjectCollection.GlobalProjectCollection);
        }

        private Dictionary<string, string> _getGlobalProperties(EnvDTE.Project dteProject)
        {
            Dictionary<string, string> prop = new Dictionary<string, string>(ProjectCollection.GlobalProjectCollection.GlobalProperties); // copy from ProjectCollection
            
            if(!prop.ContainsKey("Configuration")) {
                prop["Configuration"] = dteProject.ConfigurationManager.ActiveConfiguration.ConfigurationName;
            }

            if(!prop.ContainsKey("Platform")) {
                prop["Platform"] = dteProject.ConfigurationManager.ActiveConfiguration.PlatformName;
            }
            
            if(!prop.ContainsKey("BuildingInsideVisualStudio")) {
                // by default(can be changed in other components) set as "true" in Microsoft.VisualStudio.Project.ProjectNode :: DoMSBuildSubmission & SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet
                prop["BuildingInsideVisualStudio"] = "true";
            }
            if(!prop.ContainsKey("DevEnvDir"))
            {
                // http://technet.microsoft.com/en-us/microsoft.visualstudio.shell.interop.__vsspropid%28v=vs.71%29.aspx

                object dirObject = null;
                vsSolutionBuildEventPackage.Shell.GetProperty((int)__VSSPROPID.VSSPROPID_InstallDirectory, out dirObject);

                string dir              = (string)dirObject;
                const string vDefault   = "Undefined";

                if(String.IsNullOrEmpty(dir)) {
                    prop["DevEnvDir"] = vDefault;
                }
                else if(dir.ElementAt(dir.Length - 1) != Path.DirectorySeparatorChar) {
                    dir += Path.DirectorySeparatorChar;
                }
                prop["DevEnvDir"] = dir;
            }

            if(!prop.ContainsKey("SolutionDir")  
               || !prop.ContainsKey("SolutionName")
               || !prop.ContainsKey("SolutionFileName")
               || !prop.ContainsKey("SolutionExt")
               || !prop.ContainsKey("SolutionPath"))
            {
                string dir, file, opts;
                vsSolutionBuildEventPackage.Solution.GetSolutionInfo(out dir, out file, out opts);

                string fname                = Path.GetFileName(file);
                string name                 = Path.GetFileNameWithoutExtension(file);
                string ext                  = Path.GetExtension(file);
                const string vDefault       = "Undefined";

                prop["SolutionDir"]         = dir != null ? dir : vDefault;
                prop["SolutionName"]        = name != null ? name : vDefault;
                prop["SolutionFileName"]    = fname != null ? fname : vDefault;
                prop["SolutionExt"]         = ext != null ? ext : vDefault;
                prop["SolutionPath"]        = file != null ? file : vDefault;
            }

            if(!prop.ContainsKey("RunCodeAnalysisOnce")) {
                // by default set as "false" in Microsoft.VisualStudio.Package.GlobalPropertyHandler
                prop["RunCodeAnalysisOnce"] = "false";
            }

            return prop;
        }

        private string _getSolutionGlobalProperty(string name)
        {
            if(name.Equals("Configuration")) {
                return SolutionActiveConfiguration.Name;
            }

            if(name.Equals("Platform")) {
                return SolutionActiveConfiguration.PlatformName;
            }

            return null;
        }

        /// <summary>
        /// Getting the project name and format unevaluated variable
        /// ~ (variable:project) -> variable & project
        /// </summary>
        /// <param name="unevaluated">to be formatted after handling</param>
        /// <returns>project name or null if not present</returns>
        private string _splitGeneralProjectAttr(ref string unevaluated)
        {
            unevaluated = unevaluated.Substring(1, unevaluated.Length - 2);
            int pos     = unevaluated.LastIndexOf(':');

            if(pos == -1) {
                return null; //(ProjectOutputFolder.Substring(0, 1)), (OS), (OS.Length)
            }
            if(unevaluated.ElementAt(pos - 1).CompareTo(':') == 0) {
                return null; //([System.DateTime]::Now), ([System.Guid]::NewGuid())
            }
            if(unevaluated.IndexOf(')', pos) != -1) {
                return null; // allow only for latest block (general option)  :project)) | :project) ... )-> :project)
            }

            string project  = unevaluated.Substring(pos + 1, unevaluated.Length - pos - 1);
            unevaluated     = unevaluated.Substring(0, pos);

            return project;
        }

        private bool _isSimpleProperty(ref string unevaluated)
        {
            if(unevaluated.IndexOfAny(new char[]{'.', ':', '(', ')', '\'', '"'}) != -1) {
                return false;
            }
            return true;
        }
    }

    /// <summary>
    /// item of property: name = value
    /// </summary>
    public sealed class MSBuildPropertyItem
    {
        public string name;
        public string value;

        public MSBuildPropertyItem(string name, string value)
        {
            this.name  = name;
            this.value = value;
        }
    }

    //TODO:
    public struct SBECustomVariable
    {
        public const string OWP_BUILD           = "vsSBE_OWPBuild";
        public const string OWP_BUILD_WARNINGS  = "vsSBE_OWPBuildWarnings";
        public const string OWP_BUILD_ERRORS    = "vsSBE_OWPBuildErrors";
    }
}
