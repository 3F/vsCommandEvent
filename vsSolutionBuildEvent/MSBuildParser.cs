/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using EnvDTE80;
using Microsoft.Build.Collections;
using Microsoft.Build.Evaluation;
using Microsoft.VisualStudio.Shell.Interop;

namespace net.r_eg.vsSBE
{
    public class MSBuildParser: IMSBuildProperty, ISBEParserScript
    {
        /// <summary>
        /// Work with DTE because the ProjectCollection.GlobalProjectCollection can be is empty
        /// https://bitbucket.org/3F/vssolutionbuildevent/issue/8/
        /// </summary>
        public IEnumerable<EnvDTE.Project> DTEProjects
        {
            get
            {
                foreach(EnvDTE.Project project in DTEProjectsRaw)
                {
                    if(String.IsNullOrEmpty(project.FullName) || String.IsNullOrEmpty(project.Name)) {
                        continue;
                    }
                    yield return project;
                }
            }
        }

        protected IEnumerable<EnvDTE.Project> DTEProjectsRaw
        {
            get
            {
                foreach(EnvDTE.Project project in dte2.Solution.Projects)
                {
                    if(project.Kind != ProjectKinds.vsProjectKindSolutionFolder) {
                        yield return project;
                        continue;
                    }

                    foreach(EnvDTE.Project subproject in listSubProjectsDTE(project)) {
                        yield return subproject;
                    }
                }
            }
        }

        /// <summary>
        /// DTE context
        /// </summary>
        protected DTE2 dte2 = null;

        /// <summary>
        /// Definitions of user scripts
        /// </summary>
        protected ConcurrentDictionary<string, string> definitions = new ConcurrentDictionary<string, string>();

        /// <summary>
        /// Getting name from "Set as SturtUp Project"
        /// </summary>
        protected string StartupProjectString
        {
            get
            {
                foreach(string project in (Array)dte2.Solution.SolutionBuild.StartupProjects)
                {
                    if(String.IsNullOrEmpty(project)) {
                        continue;
                    }
                    return project;
                }
                return null;
            }
        }

        protected SolutionConfiguration2 SolutionActiveConfiguration
        {
            get { return (SolutionConfiguration2)dte2.Solution.SolutionBuild.ActiveConfiguration; }
        }

        /// <summary>
        /// object synch.
        /// </summary>
        private Object _eLock = new Object();

        /// <summary>
        /// MSBuild Property from default Project
        /// </summary>
        /// <param name="name">key property</param>
        /// <returns>evaluated value</returns>
        public string getProperty(string name)
        {
            return getProperty(name, null);
        }

        /// <summary>
        /// MSBuild Property from specific project
        /// </summary>
        /// <param name="name">key of property</param>
        /// <param name="projectName">Specific project</param>
        /// <exception cref="MSBuildParserProjectPropertyNotFoundException">problem with getting property</exception>
        /// <returns>Evaluated value of property</returns>
        public string getProperty(string name, string projectName)
        {
            if(projectName == null)
            {
                string slnProp = _getSolutionGlobalProperty(name);
                if(slnProp != null) {
                    Log.nlog.Debug("Solution-context for getProperty - '{0}' = '{1}'", name, slnProp);
                    return slnProp;
                }
            }
            
            Project project         = getProject(projectName);
            ProjectProperty prop    = project.GetProperty(name);

            if(prop != null) {
                return prop.EvaluatedValue;
            }
            throw new MSBuildParserProjectPropertyNotFoundException(String.Format("variable - '{0}' : project - '{1}'", name, (projectName == null) ? "<default>" : projectName));
        }

        public List<TMSBuildPropertyItem> listProperties(string projectName = null)
        {
            List<TMSBuildPropertyItem> properties = new List<TMSBuildPropertyItem>();

            Project project = getProject(projectName);
            foreach(ProjectProperty property in project.Properties)
            {
                string eValue = property.EvaluatedValue;
                if(projectName == null)
                {
                    string slnProp = _getSolutionGlobalProperty(property.Name);
                    if(slnProp != null) {
                        Log.nlog.Debug("Solution-context for listProperties - '{0}' = '{1}'", property.Name, slnProp);
                        eValue = slnProp;
                    }
                }

                properties.Add(new TMSBuildPropertyItem(property.Name, eValue));
            }
            return properties;
        }

        public List<string> listProjects()
        {
            List<string> projects = new List<string>();

            foreach(EnvDTE.Project project in DTEProjects) {
                projects.Add(project.Name);
            }
            return projects;
        }

        /// <summary>
        /// Evaluate data with the MSBuild engine.
        /// alternative to Microsoft.Build.BuildEngine - http://msdn.microsoft.com/en-us/library/Microsoft.Build.BuildEngine
        /// </summary>
        /// <param name="unevaluated">raw string as $(..data..)</param>
        /// <param name="projectName">push null if default</param>
        /// <returns>evaluated value</returns>
        public virtual string evaluateVariable(string unevaluated, string projectName)
        {
            const string container  = "vsSBE_latestEvaluated";
            Project project         = getProject(projectName);

            lock(_eLock)
            {
                try {
                    project.SetProperty(container, unevaluated);
                    return project.GetProperty(container).EvaluatedValue;
                }
                finally {
                    project.RemoveProperty(project.GetProperty(container));
                }
            }
        }

        /// <summary>
        /// Simple handler properties of MSBuild environment
        /// </summary>
        /// <param name="data">text with $(ident) data</param>
        /// <returns>text with evaluated properties</returns>
        [Obsolete("Use the parseVariablesMSBuild", false)]
        public string parseVariablesMSBuildSimple(string data)
        {
            return Regex.Replace(data, @"
                                         (?<!\$)\$
                                         \(
                                           (?:
                                             (
                                               [^\:\r\n)]+?
                                             )
                                             \:
                                             (
                                               [^)\r\n]+?
                                             )
                                             |
                                             (
                                               [^)]*?
                                             )
                                           )
                                         \)", delegate(Match m)
            {
                // 3   -> $(name)
                // 1,2 -> $(name:project)

                if(m.Groups[3].Success) {
                    return getProperty(m.Groups[3].Value);
                }
                return getProperty(m.Groups[1].Value, m.Groups[2].Value);

            }, RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace).Replace("$$(", "$(");
        }

        public virtual string parseVariablesMSBuild(string data)
        {
            /*
                    (
                      \${1,2}
                    )
                    (?=
                      (
                        \(
                          (?>
                            [^()]
                            |
                            (?2)
                          )*
                        \)
                      )
                    )            -> for .NET: v             
             */
            return Regex.Replace(data,  @"(
                                            \${1,2}
                                          )
                                          (
                                            \(
                                              (?>
                                                [^()]
                                                |
                                                \((?<R>)
                                                |
                                                \)(?<-R>)
                                              )*
                                              (?(R)(?!))
                                            \)
                                          )", delegate(Match m)
            {
                // 1 - $ or $$
                // 2 - (name) or (name:project) or ([MSBuild]::MakeRelative($(path1), ...):project) .. 
                //      http://msdn.microsoft.com/en-us/library/vstudio/dd633440%28v=vs.120%29.aspx

                if(m.Groups[1].Value.Length > 1) { //escape
                    return m.Value.Substring(1);
                }

                return evaluateVariable(prepareVariables(m.Groups[2].Value));
            }, 
            RegexOptions.IgnorePatternWhitespace);
        }


        /// <summary>
        /// All variables which are not included in MSBuild environment.
        /// Customization for our data
        /// </summary>
        /// <param name="data">where to look</param>
        /// <param name="name">we're looking for..</param>
        /// <param name="value">replace with this value if found</param>
        /// <returns></returns>
        public string parseCustomVariable(string data, string name, string value)
        {
            return Regex.Replace(data,  @"(
                                            \${1,2}
                                          )
                                          \(
                                            (
                                              [^)]+?
                                            )
                                          \)", delegate(Match m)
            {
                if(m.Groups[2].Value != name || m.Groups[1].Value.Length > 1) {
                    return m.Value;
                }
                return (value == null)? "" : value;
            }, RegexOptions.IgnorePatternWhitespace);
        }

        /// <param name="dte2">DTE context</param>
        public MSBuildParser(DTE2 dte2)
        {
            this.dte2 = dte2;
        }

        /// <param name="raw">raw data at format - '(..data..)'</param>
        protected TPreparedData prepareVariables(string raw)
        {
            TPreparedData ret = new TPreparedData();

            Match m = Regex.Match(raw.Trim(), @"^\(  
                                                   (?:
                                                     (\#)?           # 1 -> special char  (optional)
                                                     ([A-z_0-9]+)    # 2 -> variable name (optional)
                                                     \s*=\s*
                                                   )?
                                                   (?:
                                                      (.+)           # 3 -> unevaluated data
                                                      :([^)]+)       # 4 -> specific project for variable if 2 is present or for unevaluated data
                                                    |                # or:
                                                      (.+)           # 5 -> unevaluated data
                                                   )
                                               \)$", RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                Log.nlog.Debug("impossible to prepare data '{0}'", raw);
                throw new NotSupportedException(String.Format("prepare failed - '{0}'", raw)); //TODO
            }
            bool hasVar     = m.Groups[2].Success;
            bool hasProject = m.Groups[3].Success ? true : false;

            if(hasVar) {
                ret.variable.name           = m.Groups[2].Value.Trim();
                ret.variable.isPersistence  = (m.Groups[1].Success && m.Groups[1].Value == "#") ? true : false;
            }

            ret.property.raw = (hasProject ? m.Groups[3] : m.Groups[5]).Value.Trim();

            bool composite          = (ret.property.raw[0] == '$') ? true : false;
            ret.property.escaped    = (composite && ret.property.raw[1] == '$') ? true : false;

            if(hasProject)
            {
                string project = m.Groups[4].Value.Trim();

                if(!composite) {
                    ret.property.project = project;
                }
                else if(hasVar) {
                    ret.variable.project = project;
                }
                else {
                    // can be variable variables e.g.: ($(var:project):project)
                    ret.property.project = project; // TODO
                }
            }

            ret.property.complex = !_isPropertySimple(ref ret.property.raw) || composite;

            if(!ret.property.complex) {
                ret.property.unevaluated = ret.property.raw;
                ret.property.completed   = true;
                Log.nlog.Debug("Prepared: simple - '{0}'", ret.property.unevaluated);
                return ret;
            }
            if(ret.property.escaped) {
                ret.property.unevaluated = ret.property.raw.Substring(1);
                ret.property.completed   = true;
                Log.nlog.Debug("Prepared: complex escaped - '{0}'", ret.property.unevaluated);
                return ret;
            }
            
            // try to simplify
            m = Regex.Match(ret.property.raw, @"^
                                                  \$
                                                  \(
                                                     ([A-z_0-9]+)     # 1 - name
                                                     (?::([^)]+))?    # 2 - project
                                                  \)
                                                $", RegexOptions.IgnorePatternWhitespace);

            if(m.Success)
            {
                ret.property.complex        = false;
                ret.property.unevaluated    = m.Groups[1].Value;
                ret.property.project        = (m.Groups[2].Success) ? m.Groups[2].Value.Trim() : null;
                ret.property.completed      = true;
                Log.nlog.Debug("Prepared: found simple property '{0}' for '{1}'", ret.property.unevaluated, ret.property.project);
                return ret;
            }

            //TODO: internal projects
            ret.property.unevaluated = ret.property.raw;
            if(!ret.property.unevaluated.StartsWith("$(")) {
                ret.property.unevaluated = String.Format("$({0})", ret.property.unevaluated);
            }

            Log.nlog.Debug("Prepared: step out");
            return ret;
        }

        protected string evaluateVariable(TPreparedData prepared)
        {
            string evaluated = "";
            
            if(prepared.property.completed && !prepared.property.complex)
            {
                string defindex = String.Format("{0}:{1}", prepared.property.unevaluated, prepared.property.project);

                if(definitions.ContainsKey(defindex)) {
                    Log.nlog.Debug("Evaluate: use the definitions");
                    evaluated = definitions[defindex];
                }
                else {
                    Log.nlog.Debug("Evaluate: use the getProperty");
                    evaluated = getProperty(prepared.property.unevaluated, prepared.property.project);
                }
            }
            else if(prepared.property.escaped){
                Log.nlog.Debug("Evaluate: escaped value");
                evaluated = prepared.property.unevaluated;
            }
            else{
                Log.nlog.Debug("Evaluate: use the evaluateVariable");
                evaluated = evaluateVariable(prepared.property.unevaluated, prepared.property.project);
            }

            if(!String.IsNullOrEmpty(prepared.variable.name))
            {
                //INFO: prepared.variable.isPersistence - [reserved]
                string defindex = String.Format("{0}:{1}", prepared.variable.name, prepared.variable.project);
                Log.nlog.Debug("Variable of user: set '{0}' = '{1}'", defindex, evaluated);
                definitions[defindex] = evaluated;
                evaluated = "";
            }

            Log.nlog.Debug("Evaluated: '{0}'", evaluated);
            return evaluated;
        }

        /// <summary>
        /// Getting the Build.Evaluation.Project for access to properties etc.
        /// if the project as null then selected startup-project in the list or the first with the same Configuration & Platform
        /// </summary>
        /// <param name="project">Specific project</param>
        /// <exception cref="MSBuildParserProjectNotFoundException">something wrong with loaded projects</exception>
        /// <returns>Microsoft.Build.Evaluation.Project</returns>
        protected virtual Project getProject(string project = null)
        {
            EnvDTE.Project selected = null;
            string sturtup          = StartupProjectString;

            if(project == null) {
                Log.nlog.Debug("default project is a '{0}'", sturtup);
            }

            foreach(EnvDTE.Project dteProject in DTEProjects)
            {
                if(project == null && !String.IsNullOrEmpty(sturtup) && !dteProject.UniqueName.Equals(sturtup)) {
                    continue;
                }
                else if(project != null && !dteProject.Name.Equals(project)) {
                    continue;
                }
                selected = dteProject;
                Log.nlog.Trace("selected = dteProject: '{0}'", dteProject.FullName);

                foreach(Project eProject in ProjectCollection.GlobalProjectCollection.LoadedProjects)
                {
                    if(isEquals(dteProject, eProject)) {
                        return eProject;
                    }
                }
                break; // selected & LoadedProjects is empty
            }

            if(selected != null) {
                Log.nlog.Debug("getProject->selected '{0}'", selected.FullName);
                return tryLoadPCollection(selected);
            }
            throw new MSBuildParserProjectNotFoundException(String.Format("not found project: '{0}' [sturtup: '{1}']", project, sturtup));
        }

        protected bool isEquals(EnvDTE.Project dteProject, Project eProject)
        {
            string ePrgName         = eProject.GetPropertyValue("ProjectName");
            string ePrgCfg          = eProject.GetPropertyValue("Configuration");
            string ePrgPlatform     = eProject.GetPropertyValue("Platform");

            string dtePrgName       = dteProject.Name;
            string dtePrgCfg        = dteProject.ConfigurationManager.ActiveConfiguration.ConfigurationName;
            string dtePrgPlatform   = dteProject.ConfigurationManager.ActiveConfiguration.PlatformName;

            Log.nlog.Trace("isEquals for '{0}' : '{1}' [{2} = {3} ; {4} = {5}]",
                            eProject.FullPath, dtePrgName, dtePrgCfg, ePrgCfg, dtePrgPlatform, ePrgPlatform);

            if(dtePrgName.Equals(ePrgName) && dtePrgCfg.Equals(ePrgCfg) && dtePrgPlatform.Equals(ePrgPlatform))
            {
                Log.nlog.Trace("isEquals: matched");
                return true;
            }
            return false;
        }

        /// <summary>
        /// This solution for similar problems - MS Connect Issue #508628:
        /// http://connect.microsoft.com/VisualStudio/feedback/details/508628/
        /// </summary>
        protected Project tryLoadPCollection(EnvDTE.Project dteProject)
        {
            Dictionary<string, string> prop = _getGlobalProperties(dteProject);

            Log.nlog.Debug("tryLoadPCollection :: '{0}' [{1} ; {2}]", dteProject.FullName, prop["Configuration"], prop["Platform"]);
            //ProjectCollection.GlobalProjectCollection.LoadProject(dteProject.FullName, prop, null);
            return new Project(dteProject.FullName, prop, null, ProjectCollection.GlobalProjectCollection);
        }

        protected IEnumerable<EnvDTE.Project> listSubProjectsDTE(EnvDTE.Project project)
        {
            foreach(EnvDTE.ProjectItem item in project.ProjectItems)
            {
                if(item.SubProject == null) {
                    continue; //e.g. project is incompatible with used version of visual studio
                }

                if(item.SubProject.Kind != ProjectKinds.vsProjectKindSolutionFolder) {
                    yield return item.SubProject;
                    continue;
                }

                foreach(EnvDTE.Project subproject in listSubProjectsDTE(item.SubProject)) {
                    yield return subproject;
                }
            }
        }

        private Dictionary<string, string> _getGlobalProperties(EnvDTE.Project dteProject)
        {
            Dictionary<string, string> prop = new Dictionary<string, string>(ProjectCollection.GlobalProjectCollection.GlobalProperties); // copy from ProjectCollection
            
            if(!prop.ContainsKey("Configuration")) {
                prop["Configuration"] = dteProject.ConfigurationManager.ActiveConfiguration.ConfigurationName;
            }

            if(!prop.ContainsKey("Platform")) {
                prop["Platform"] = dteProject.ConfigurationManager.ActiveConfiguration.PlatformName;
            }
            
            if(!prop.ContainsKey("BuildingInsideVisualStudio")) {
                // by default(can be changed in other components) set as "true" in Microsoft.VisualStudio.Project.ProjectNode :: DoMSBuildSubmission & SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet
                prop["BuildingInsideVisualStudio"] = "true";
            }
            if(!prop.ContainsKey("DevEnvDir"))
            {
                // http://technet.microsoft.com/en-us/microsoft.visualstudio.shell.interop.__vsspropid%28v=vs.71%29.aspx

                object dirObject = null;
                vsSolutionBuildEventPackage.Shell.GetProperty((int)__VSSPROPID.VSSPROPID_InstallDirectory, out dirObject);

                string dir              = (string)dirObject;
                const string vDefault   = "Undefined";

                if(String.IsNullOrEmpty(dir)) {
                    prop["DevEnvDir"] = vDefault;
                }
                else if(dir.ElementAt(dir.Length - 1) != Path.DirectorySeparatorChar) {
                    dir += Path.DirectorySeparatorChar;
                }
                prop["DevEnvDir"] = dir;
            }

            if(!prop.ContainsKey("SolutionDir")  
               || !prop.ContainsKey("SolutionName")
               || !prop.ContainsKey("SolutionFileName")
               || !prop.ContainsKey("SolutionExt")
               || !prop.ContainsKey("SolutionPath"))
            {
                string dir, file, opts;
                vsSolutionBuildEventPackage.Solution.GetSolutionInfo(out dir, out file, out opts);

                string fname                = Path.GetFileName(file);
                string name                 = Path.GetFileNameWithoutExtension(file);
                string ext                  = Path.GetExtension(file);
                const string vDefault       = "Undefined";

                prop["SolutionDir"]         = dir != null ? dir : vDefault;
                prop["SolutionName"]        = name != null ? name : vDefault;
                prop["SolutionFileName"]    = fname != null ? fname : vDefault;
                prop["SolutionExt"]         = ext != null ? ext : vDefault;
                prop["SolutionPath"]        = file != null ? file : vDefault;
            }

            if(!prop.ContainsKey("RunCodeAnalysisOnce")) {
                // by default set as "false" in Microsoft.VisualStudio.Package.GlobalPropertyHandler
                prop["RunCodeAnalysisOnce"] = "false";
            }

            return prop;
        }

        private string _getSolutionGlobalProperty(string name)
        {
            if(String.IsNullOrEmpty(name)) {
                return null;
            }

            if(name.Equals("Configuration")) {
                return SolutionActiveConfiguration.Name;
            }

            if(name.Equals("Platform")) {
                return SolutionActiveConfiguration.PlatformName;
            }

            return null;
        }

        private bool _isPropertySimple(ref string unevaluated)
        {
            if(unevaluated.IndexOfAny(new char[]{'.', ':', '(', ')', '\'', '"', '[', ']'}) != -1) {
                return false;
            }
            return true;
        }
    }

    public struct TPreparedData
    {
        /// <summary>
        /// Dynamically define variables
        /// </summary>
        public TVar variable;
        /// <summary>
        /// Unit of properties
        /// </summary>
        public TProperty property;

        public struct TVar
        {
            /// <summary>
            /// Storage if present
            /// </summary>
            public string name;
            /// <summary>
            /// Specific project where to store.
            /// null value - project by default
            /// </summary>
            public string project;
            /// <summary>
            /// Storing in the projects files ~ .csproj, .vcxproj, ..
            /// </summary>
            /// <remarks>reserved</remarks>
            public bool isPersistence;
        }

        public struct TProperty
        {
            /// <summary>
            /// Complex phrase or simple property
            /// </summary>
            public bool complex;
            /// <summary>
            /// has escaped property
            /// </summary>
            public bool escaped;
            /// <summary>
            /// Contain all prepared data from specific projects. Not complete evaluation!
            /// i.e.: prepares only all $(..:project) data
            /// </summary>
            public string unevaluated;
            /// <summary>
            /// Specific project for unevaluated data
            /// </summary>
            public string project;
            /// <summary>
            /// Step of handling
            /// </summary>
            public bool completed;
            /// <summary>
            /// Raw unprepared data without(in any case) storage variable
            /// </summary>
            public string raw;
        }
    }

    /// <summary>
    /// item of property: name = value
    /// </summary>
    public struct TMSBuildPropertyItem
    {
        public string name;
        public string value;

        public TMSBuildPropertyItem(string name, string value)
        {
            this.name  = name;
            this.value = value;
        }
    }

    //TODO:
    internal struct SBECustomVariable
    {
        public const string OWP_BUILD           = "vsSBE_OWPBuild";
        public const string OWP_BUILD_WARNINGS  = "vsSBE_OWPBuildWarnings";
        public const string OWP_BUILD_ERRORS    = "vsSBE_OWPBuildErrors";
    }
}
