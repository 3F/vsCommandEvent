/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace net.r_eg.vsSBE.Extensions
{
    public static class ArrayExtension
    {
        /// <summary>
        /// Adding new element into the data and returning as new array
        /// </summary>
        /// <typeparam name="T">Type of array</typeparam>
        /// <param name="data"></param>
        /// <param name="item"></param>
        /// <returns>array with added item</returns>
        public static T[] GetWithAdded<T>(this T[] data, T item)
        {
            T[] ret = new T[data.Length + 1];
            data.CopyTo(ret, 0);
            ret[data.Length] = item;
            return ret;
        }

        /// <summary>
        /// Removing element from the data and returning as new array
        /// </summary>
        /// <typeparam name="T">Type of array</typeparam>
        /// <param name="data"></param>
        /// <param name="index">Index of item for removing</param>
        /// <returns>array without element at the specified index</returns>
        public static T[] GetWithRemoved<T>(this T[] data, int index)
        {
            T[] ret = new T[data.Length - 1];
            int idx = 0;
            for(int i = 0; i < data.Length; ++i) {
                if(i != index) {
                    ret[idx++] = data[i];
                }
            }
            return ret;
        }

        /// <summary>
        /// Inserts an element into the data at the specified index and returning as new array
        /// </summary>
        /// <typeparam name="T">Type of array</typeparam>
        /// <param name="data"></param>
        /// <param name="index">The zero-based index at which item should be inserted. If index is equal to Length, item is added to the end.</param>
        /// <param name="item"></param>
        /// <returns>array with added item at the specified index</returns>
        public static T[] GetWithInserted<T>(this T[] data, int index, T item)
        {
            if(data.Length == index) {
                return GetWithAdded(data, item);
            }
            T[] ret = new T[data.Length + 1];
            int idx = 0;
            for(int i = 0; i < data.Length; ++i) {
                if(i == index) {
                    ret[idx++] = item;
                }
                ret[idx++] = data[i];
            }
            return ret;
        }

        /// <summary>
        /// Moving element into the new position
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="data"></param>
        /// <param name="from">old index</param>
        /// <param name="to">new index</param>
        /// <returns>array with moved item at the specified indexes</returns>
        public static T[] GetWithMoved<T>(this T[] data, int from, int to)
        {
            T moving = data[from];
            return GetWithInserted(data.GetWithRemoved(from), to, moving);
        }
    }
}
