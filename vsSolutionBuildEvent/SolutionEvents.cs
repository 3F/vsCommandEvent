/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using net.r_eg.vsSBE.Events;

namespace net.r_eg.vsSBE
{
    [Serializable]
    public class SolutionEvents
    {
        /// <summary>
        /// Additional information for configuration
        /// </summary>
        public ConfigHeader Header
        {
            get { return header; }
            set { header = value; }
        }
        [NonSerialized]
        private ConfigHeader header = new ConfigHeader();

        /// <summary>
        /// Before assembling
        /// </summary>
        public SBEEvent[] PreBuild
        {
            get { return preBuild; }
            set { preBuild = value; }
        }
        [NonSerialized]
        private SBEEvent[] preBuild = new SBEEvent[] { new SBEEvent() };

        /// <summary>
        /// After assembling
        /// </summary>
        public SBEEvent[] PostBuild
        {
            get { return postBuild; }
            set { postBuild = value; }
        }
        [NonSerialized]
        private SBEEvent[] postBuild = new SBEEvent[] { new SBEEvent() };

        /// <summary>
        /// When user cancelled the building or when an error occurs
        /// </summary>
        public SBEEvent[] CancelBuild
        {
            get { return cancelBuild; }
            set { cancelBuild = value; }
        }
        [NonSerialized]
        private SBEEvent[] cancelBuild = new SBEEvent[] { new SBEEvent() };

        /// <summary>
        /// Warnings during assembly processing
        /// </summary>
        public SBEEventEW[] WarningsBuild
        {
            get { return warningsBuild; }
            set { warningsBuild = value; }
        }
        [NonSerialized]
        private SBEEventEW[] warningsBuild = new SBEEventEW[] { new SBEEventEW() };

        /// <summary>
        /// Errors during assembly processing
        /// </summary>
        public SBEEventEW[] ErrorsBuild
        {
            get { return errorsBuild; }
            set { errorsBuild = value; }
        }
        [NonSerialized]
        private SBEEventEW[] errorsBuild = new SBEEventEW[] { new SBEEventEW() };

        /// <summary>
        /// Customization from the Output
        /// </summary>
        public SBEEventOWP[] OWPBuild
        {
            get { return owpBuild; }
            set { owpBuild = value; }
        }
        [NonSerialized]
        private SBEEventOWP[] owpBuild = new SBEEventOWP[] { new SBEEventOWP() };

        /// <summary>
        /// Transmission building-data to outer handler
        /// </summary>
        public SBETransmitter[] Transmitter
        {
            get { return transmitter; }
            set { transmitter = value; }
        }
        [NonSerialized]
        private SBETransmitter[] transmitter = new SBETransmitter[] { new SBETransmitter() };
    }
}
