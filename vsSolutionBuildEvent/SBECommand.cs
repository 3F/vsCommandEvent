/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace net.r_eg.vsSBE
{
    class SBECommand
    {
        /// <summary>
        /// working directory for commands
        /// </summary>
        private SBEContext _context = null;

        /// <summary>
        /// basic implementation
        /// </summary>
        /// <param name="evt">provided sbe-events</param>
        public bool basic(ISolutionEvent evt)
        {
            if(!evt.enabled){
                return false;
            }

            if(evt.mode == TModeCommands.Interpreter) {
                return hModeScript(evt);
            }
            return hModeFile(evt);
        }

        public SBECommand()
        {
            string path = Config.getWorkPath();
            _context    = new SBEContext(path, _letDisk(path));
        }

        protected bool hModeFile(ISolutionEvent evt)
        {
            ProcessStartInfo psi = new ProcessStartInfo("cmd.exe");
            if(evt.processHide){
                psi.WindowStyle = ProcessWindowStyle.Hidden;
            }

            //TODO: [optional] capture message...

            string script = evt.command;

            if(evt.parseVariablesMSBuild) {
                script = (new MSBuildParser()).parseVariablesMSBuild(script);
            }

            string args = string.Format(
                "/C cd {0}{1} & {2}",
                _context.path, 
                (_context.disk != null) ? " & " + _context.disk + ":" : "",
                _treatNewlineAs(" & ", _modifySlash(script)));

            if(!evt.processHide && evt.processKeep){
                args += " & pause";
            }

            psi.Arguments       = args;
            Process process     = new Process();
            process.StartInfo   = psi;
            process.Start();

            if(evt.waitForExit){
                process.WaitForExit(); //TODO: !replace it on handling build
            }
            return true;
        }

        //TODO:
        protected bool hModeScript(ISolutionEvent evt)
        {
            if(evt.interpreter.Trim().Length < 1){
                return false;
            }
            //new ProcessStartInfo(evt.interpreter);

            string script = evt.command;

            if(evt.parseVariablesMSBuild) {
                script = (new MSBuildParser()).parseVariablesMSBuild(script);
            }

            script = _treatNewlineAs(evt.newline, script);

            if(evt.wrapper.Length > 0){
                script = evt.wrapper + script.Replace(evt.wrapper, "\\" + evt.wrapper) + evt.wrapper;
            }

            ProcessStartInfo psi = new ProcessStartInfo("cmd.exe");
            if(evt.processHide) {
                psi.WindowStyle = ProcessWindowStyle.Hidden;
            }

            string args = string.Format("/C cd {0}{1} & {2} {3}",
                                        _context.path,
                                        (_context.disk != null) ? " & " + _context.disk + ":" : "",
                                        evt.interpreter, //TODO: optional manually..
                                        script);

            if(!evt.processHide && evt.processKeep) {
                args += " & pause";
            }

            Debug.WriteLine(args);

            psi.Arguments       = args;
            Process process     = new Process();
            process.StartInfo   = psi;
            process.Start();

            //TODO: [optional] capture message...

            if(evt.waitForExit) {
                process.WaitForExit(); //TODO: !replace it on handling build
            }
            return true;
        }

        private string _modifySlash(string data)
        {
            return data.Replace("/", "\\");
        }

        private string _treatNewlineAs(string str, string data)
        {
            return data.Replace("\r", "").Replace("\n", str);
        }

        private static string _letDisk(string path)
        {
            if(path.Length < 1){
                return null;
            }
            return path.Substring(0, 1);
        }
    }

    class SBEContext
    {
        public string path;
        public string disk;

        public SBEContext(string path, string disk)
        {
            this.path = path;
            this.disk = disk;
        }
    }
}
