/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using net.r_eg.vsSBE.Events;

namespace net.r_eg.vsSBE.Actions
{
    /// <summary>
    /// Specification of status for all actions
    /// </summary>
    public interface IStatus
    {
        /// <summary>
        /// New status for Event type
        /// </summary>
        /// <param name="tevent">Event type</param>
        /// <param name="tstatus">Execution status</param>
        void add(SolutionEventType tevent, StatusType tstatus);

        /// <summary>
        /// Flushing of all execution statuses by Event type
        /// </summary>
        /// <param name="tevent"></param>
        void flush(SolutionEventType tevent);

        /// <summary>
        /// Flushing of all execution statuses
        /// </summary>
        void flush();

        /// <summary>
        /// Getting the Execution status by Event type and position in list
        /// </summary>
        /// <param name="tevent">Event type</param>
        /// <param name="index">Position in list</param>
        /// <returns>Executed status</returns>
        StatusType get(SolutionEventType tevent, int index);

        /// <summary>
        /// Getting the Execution statuses by Event type
        /// </summary>
        /// <param name="tevent">Event type</param>
        /// <returns>List of Execution statuses</returns>
        //SynchronizedCollection<StatusType> get(SolutionEventType tevent);

        /// <summary>
        /// Checking existence of StatusType in the current statuses
        /// </summary>
        /// <param name="tevent">Event type</param>
        /// <param name="type"></param>
        /// <returns>true value if contains</returns>
        bool contains(SolutionEventType tevent, StatusType type);

        /// <summary>
        /// Updating status for Event type
        /// </summary>
        /// <param name="tevent">Event type</param>
        /// <param name="index">Position in list</param>
        /// <param name="tstatus">new status</param>
        void update(SolutionEventType tevent, int index, StatusType tstatus);
    }

    /// <summary>
    /// Type of available statuses
    /// </summary>
    public enum StatusType
    {
        /// <summary>
        /// By default, for erroneous access
        /// </summary>
        NotFound,
        /// <summary>
        /// 
        /// </summary>
        Success,
        /// <summary>
        /// 
        /// </summary>
        Fail,
        /// <summary>
        ///  Support for deferred events
        /// </summary>
        Deferred
    }
}
