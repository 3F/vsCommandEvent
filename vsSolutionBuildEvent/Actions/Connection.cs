/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio;
using net.r_eg.vsSBE.Events;

namespace net.r_eg.vsSBE.Actions
{
    public class Connection: IListenerOWPL
    {
        /// <summary>
        /// Connection handler
        /// </summary>
        protected SBECommand sbe;

        public Connection(SBECommand sbe)
        {
            this.sbe = sbe;
        }

        public int bindPre(ref int pfCancelUpdate)
        {
            try {
                if(sbe.basic(Config.Data.preBuild)) {
                    Log.nlog.Info("[Pre] finished SBE: " + Config.Data.preBuild.caption);
                }
                return VSConstants.S_OK;
            }
            catch(Exception ex) {
                Log.nlog.Error("Pre-Build error: " + ex.Message);
            }
            return VSConstants.E_FAIL;
        }

        public int bindPost(int fSucceeded, int fModified, int fCancelCommand)
        {
            try {
                if(fSucceeded != 1 && Config.Data.postBuild.buildFailedIgnore && Config.Data.postBuild.enabled) {
                    Log.nlog.Info("[Post] ignored SBE: " + Config.Data.postBuild.caption);
                    return VSConstants.S_OK;
                }

                if(sbe.basic(Config.Data.postBuild)) {
                    Log.nlog.Info("[Post] finished SBE: " + Config.Data.postBuild.caption);
                }
                return VSConstants.S_OK;
            }
            catch(Exception ex) {
                Log.nlog.Error("Post-Build error: " + ex.Message);
            }
            return VSConstants.E_FAIL;
        }

        public int bindCancel()
        {
            try {
                if(sbe.basic(Config.Data.cancelBuild)) {
                    Log.nlog.Info("[Cancel] finished SBE: " + Config.Data.cancelBuild.caption);
                }
                return VSConstants.S_OK;
            }
            catch(Exception ex) {
                Log.nlog.Error("Cancel-Build error: " + ex.Message);
            }
            return VSConstants.E_FAIL;
        }

        void IListenerOWPL.raw(string data)
        {
            try {
                if(sbe.supportOWP(Config.Data.transmitter, data)) {
                    //Log.nlog.Trace("[Transmitter]: " + Config.Data.transmitter.caption);
                }
            }
            catch(Exception ex) {
                Log.nlog.Error("Transmitter error: " + ex.Message);
            }

            OutputWPBuildParser res = new OutputWPBuildParser(ref data);

            if(Config.Data.warningsBuild.enabled) {
                sbeEW(Config.Data.warningsBuild, OutputWPBuildParser.Type.Warnings, res);
            }

            if(Config.Data.errorsBuild.enabled) {
                sbeEW(Config.Data.errorsBuild, OutputWPBuildParser.Type.Errors, res);
            }

            if(Config.Data.outputCustomBuild.enabled) {
                sbeOutput(Config.Data.outputCustomBuild, ref data);
            }
        }

        protected void sbeEW(ISolutionEventEW evt, OutputWPBuildParser.Type type, OutputWPBuildParser info)
        {
            // TODO: capture code####, message..
            if(!info.checkRule(type, evt.isWhitelist, evt.codes)) {
                return;
            }

            try {
                if(sbe.basic(evt)) {
                    Log.nlog.Info("['{0}'] finished SBE: {1}", type.ToString(), evt.caption);
                }
            }
            catch(Exception ex) {
                Log.nlog.Error("SBE '{0}' error: {1}", type.ToString(), ex.Message);
            }
        }

        protected void sbeOutput(ISolutionEventOWP evt, ref string raw)
        {
            if(!(new OWPMatcher()).match(evt.eventsOWP, raw)) {
                return;
            }

            try {
                if(sbe.basic(evt)) {
                    Log.nlog.Info("['{0}'] finished SBE: {1}", "Output", evt.caption);
                }
            }
            catch(Exception ex) {
                Log.nlog.Error("SBE '{0}' error: {1}", "Output", ex.Message);
            }
        }
    }
}
