/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace net.r_eg.vsSBE
{
    public class OWPMatcher
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filters">terms of user</param>
        /// <param name="raw"></param>
        /// <returns>matched if at least one of conditions are true</returns>
        public bool match(List<TEventOWP> filters, string raw)
        {
            foreach(TEventOWP filter in filters)
            {
                switch(filter.type) {
                    case TEventOWPTerm.Default: {
                        if(mDefault(filter.term, ref raw)) {
                            return true;
                        }
                        continue;
                    }
                    case TEventOWPTerm.Regexp: {
                        if(mRegexp(filter.term, ref raw)) {
                            return true;
                        }
                        continue;
                    }
                    case TEventOWPTerm.Wildcards: {
                        if(mWildcards(filter.term, ref raw)) {
                            return true;
                        }
                        continue;
                    }
                }
            }
            return false;
        }

        protected bool mRegexp(string term, ref string raw)
        {
            try {
                return Regex.Match(raw, term/*, RegexOptions.IgnoreCase*/).Success;
            }
            catch(Exception ex) {
                // all incorrect syntax should be simply false
                Log.nlog.Warn("OWPMatcher: {0}", ex.Message);
            }
            return false;
        }

        protected bool mWildcards(string term, ref string raw)
        {
            //TODO: rapid alternative https://bitbucket.org/3F/sandbox/src/master-C%2B%2B/cpp/text/wildcards/wildcards/versions/essential/AlgorithmEss.h
            //_
            string stub = Regex.Escape(term).Replace("\\*", ".*?").Replace("\\+", ".+?").Replace("\\?", ".");
            return mRegexp(stub, ref raw);
        }

        protected bool mDefault(string term, ref string raw)
        {
            return raw.Contains(term);
        }
    }
}
