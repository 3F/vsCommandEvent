<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Package_32" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAqqoAAAAAAABhYAABAAAAADw6AAAAAAAAWYcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABaWAAAYF4AAQAAAABcWgACAAAAAE+AAAEeXQACXogAFk1+AAdPfwACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHQAAJiY
        AABhYQAAenoAAGtrAAAAAAAAAAAAAGZlAAMAAAAAXVsAs///AAIIbQABS3sAA0F2AHM+dQD4PnQAED50
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxa
        AAAAAAAAVlQAAk9LAAJWVAACAAAAAGRhAABsagAAAAAAAGBeAHRWVAD/X10AaAAAAABFegA8RnoAtDxz
        ANlQgQAGRXoAAwAAAAAAAAAAko0AAGNhAAFjYQACAAAAAGZmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        9h//+z8P//8/////v/////////////////8=
</value>
  </data>
  <data name="StringCSharpModeCodeByDefault" xml:space="preserve">
    <value>using ICommand = net.r_eg.vsSBE.Actions.ICommand;
using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;

namespace vsSolutionBuildEvent
{
    public class CSharpMode
    {
        public static int Init(ICommand cmd, ISolutionEvent evt)
        {
            return 0;
        }
    }
}</value>
  </data>
  <data name="StringDefaultValueForTargetsMode" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;

    &lt;Target Name="Init"&gt;
        &lt;!-- ... --&gt;
    &lt;/Target&gt;

    &lt;!--
        Additional properties:
            $(ActionName)
            $(BuildType)
            $(EventType)
            $(SupportMSBuild)
            $(SupportSBEScripts)
            $(SolutionActiveCfg)
            $(StartupProject)
    --&gt;
&lt;/Project&gt;</value>
  </data>
  <data name="StringScriptExampleSBE" xml:space="preserve">
    <value>#["
    Sample
"]
#[var v = 1.2.3]
#[var log = $(TMP)/v.txt]

#[($(Configuration) ~= Deb || true)
{
    #[var tBase     = $([System.DateTime]::Parse('%mdate%').ToBinary())]
    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]
    #[var revBuild  = $([System.TimeSpan]::FromTicks('$([MSBuild]::Subtract($(tNow), $(tBase)))').TotalMinutes.ToString('0'))]
    
    #[var v = #[var v].$([MSBuild]::Modulo($(revBuild), $([System.Math]::Pow(2, 14))))]
}]

#[var v = $([System.String]::Format("v{0}\r\n\t", $(v)))]
#[File write("#[var log]"):&gt; Example #[var v] Generated by vsSolutionBuildEvent]
#[IO scall("notepad", "#[var log]")]</value>
    <comment>SobaScript example</comment>
  </data>
  <data name="StringWarnForWaiting" xml:space="preserve">
    <value>Waiting for an complete action in main thread means the following:
* [Performance] - For events such as EW, OWP, Logging, etc: it may take longer to service all activated actions.
* [Compatibility] - Some actions may require locking the main thread to wait for the next step.</value>
  </data>
  <data name="WizardVerCppDefine" xml:space="preserve">
    <value>#pragma once

#ifndef VSSBE_VERSION_H_
#define VSSBE_VERSION_H_

#define VER_NUMBER_STRING           L"0.12.4";
#define VER_NUMBER_WITH_REV_STRING  L"0.12.4.17639";
#define VER_BRANCH_NAME             L"develop";
#define VER_BRANCH_SHA1             L"e3de826";
#define VER_BRANCH_REV_COUNT        L"296";
#define VER_INFORMATIONAL           L"0.12.4.17639 [ e3de826 ]";
#define VER_INFORMATIONAL_FULL      L"0.12.4.17639 [ e3de826 ] /'develop':296";

#endif</value>
    <comment>Example for wizard - Automatic Version Numbering :: C++ preprocessor directives - #define (macro definitions)</comment>
  </data>
  <data name="WizardVerCppStruct" xml:space="preserve">
    <value>#pragma once

#ifndef VSSBE_VERSION_H_
#define VSSBE_VERSION_H_

#include &lt;string&gt;

namespace example
{
    struct Version
    {
        struct TNum
        {
            const int major;
            const int minor;
            const int build;
            const int revision;

            TNum(int major, int minor, int build = 0, int revision = 0) 
                : major(major), minor(minor), build(build), revision(revision) { }

            TNum() : TNum(0, 12, 4, 17639) { }

        } number;

        const std::wstring branchName       = L"develop";
        const std::wstring branchSha1       = L"e3de826";
        const std::wstring branchRevCount   = L"296";
        const std::wstring informational    = L"0.12.4.17639 [ e3de826 ]";
    } Version;
};

#endif</value>
    <comment>Example for wizard - Automatic Version Numbering :: C++ Struct</comment>
  </data>
  <data name="WizardVerCSharpStruct" xml:space="preserve">
    <value>namespace example
{
    internal struct Version
    {
        public static readonly System.Version number    = new System.Version(0, 12, 4, 17639);
        public const string numberString                = "0.12.4";
        public const string numberWithRevString         = "0.12.4.17639";
        public const string branchName                  = "develop";
        public const string branchSha1                  = "e3de826";
        public const string branchRevCount              = "296";
        public const string informational               = "0.12.4.17639 [ e3de826 ]";
        public const string informationalFull           = "0.12.4.17639 [ e3de826 ] /'develop':296";
    }
}</value>
    <comment>Example for wizard - Automatic Version Numbering :: C# struct</comment>
  </data>
  <data name="WizardVerDirectRepl" xml:space="preserve">
    <value>&lt;!-- the mixed format --&gt;
&lt;Identifier Id="C972EFAB-8642-444F-8033-FF5C3720E97F"&gt;
    &lt;Name&gt;AwesomeApp&lt;/Name&gt;
    &lt;Author&gt;Mr.Smith&lt;/Author&gt;
&gt;&gt;&gt; &lt;Version&gt;0.12.4.17639&lt;/Version&gt; &lt;&lt;&lt;
    &lt;Description xml:space="preserve"&gt;&lt;/Description&gt;
    &lt;Locale&gt;1033&lt;/Locale&gt;
    &lt;InstalledByMsi&gt;false&lt;/InstalledByMsi&gt;
    &lt;SupportedProducts&gt;
        &lt;VisualStudio Version="14.0"&gt;
            &lt;Edition&gt;Enterprise&lt;/Edition&gt;
            &lt;Edition&gt;Ultimate&lt;/Edition&gt;
            &lt;Edition&gt;Premium&lt;/Edition&gt;
            &lt;Edition&gt;Pro&lt;/Edition&gt;
        &lt;/VisualStudio&gt;
    &lt;/SupportedProducts&gt;
    &lt;SupportedFrameworkRuntimeEdition MinVersion="4.0" /&gt;
&lt;/Identifier&gt;</value>
    <comment>Example for wizard - Automatic Version Numbering :: Direct replacement</comment>
  </data>
</root>