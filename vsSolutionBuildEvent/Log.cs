/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using EnvDTE;
using EnvDTE80;
using Microsoft.VisualStudio.Shell;
using net.r_eg.vsSBE.Exceptions;
using NLog;

namespace net.r_eg.vsSBE
{
    /// <summary>
    /// hooking up notifications
    /// </summary>
    internal delegate void LogEventHandler();

    /// <summary>
    /// Notifications with message
    /// </summary>
    internal delegate void LogMessageEvent(string message);

    /// <summary>
    /// Main logger for Package
    /// Uses the OutputWindowPanes as target
    /// </summary>
    internal static class Log
    {
        public const string OWP_ITEM_NAME = "Solution Build-Events";

        /// <summary>
        /// external logic
        /// </summary>
        public static readonly Logger nlog = LogManager.GetCurrentClassLogger();

        /// <summary>
        /// Notify about received, only as signal
        /// </summary>
        public static event LogEventHandler Receive = delegate { };

        /// <summary>
        /// Notify about received with formatted message
        /// </summary>
        public static event LogMessageEvent ReceiveMessage = delegate(string message) { };
        
        /// <summary>
        /// to display text output, represented by the OutputWindowPane
        /// </summary>
        private static OutputWindowPane _pane = null;

        /// <summary>
        /// NLog :: static "MethodCall"
        /// use with nlog
        /// https://github.com/nlog/nlog/wiki/MethodCall-target
        /// </summary>
        public static void nprint(string level, string message, string stamp)
        {
            LogLevel oLevel = LogLevel.FromString(level);

#if !DEBUG
            if(oLevel < LogLevel.Info && !Settings.debugMode) {
                return;
            }
#endif

            _notify(oLevel);

            string formatted = _format(level, message, stamp);
            ReceiveMessage(formatted);

            print(formatted);
        }

        public static void print(string message)
        {
            if(_pane == null) {
                init();
            }
            _pane.OutputString(message);
        }

        public static void init()
        {
            try {
                _pane = vsSolutionBuildEventPackage.Dte2.ToolWindows.OutputWindow.OutputWindowPanes.Item(OWP_ITEM_NAME);
            }
            catch(ArgumentException) {
                _pane = vsSolutionBuildEventPackage.Dte2.ToolWindows.OutputWindow.OutputWindowPanes.Add(OWP_ITEM_NAME);
            }
            catch(Exception ex) {
                throw new ComponentException("Log :: inner exception", ex);
            }
        }

        public static void show()
        {
            if(_pane == null) {
                init();
            }

            try {
                vsSolutionBuildEventPackage.Dte2.ExecuteCommand("View.Output");
                _pane.Activate();
            }
            catch(Exception ex) {
                //not critical because that option for quick access
                Log.nlog.Debug("DTE error 'View.Output' {0}", ex.Message);
            }
        }

        private static string _format(string level, string message, string stamp)
        {
            return String.Format("{0} [{1}]: {2}{3}",
                                (new DateTime(long.Parse(stamp))).ToString(CultureInfo.CurrentCulture.DateTimeFormat),
                                level,
                                message,
                                System.Environment.NewLine);
        }

        private static void _notify(LogLevel level)
        {
            if(level < LogLevel.Warn) {
                return;
            }
            Receive();
        }
    }
}
