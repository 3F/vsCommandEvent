/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using net.r_eg.vsSBE.Exceptions;
using net.r_eg.vsSBE.SBEScripts.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts
{
    /// <summary>
    /// TODO: specification for SBE-Script
    /// </summary>
    public static class Values
    {
        public const string VTRUE   = "true";
        public const string VFALSE  = "false";

        /// <summary>
        /// Getting boolean value
        /// Boolean.Parse() - converts only true/false value from string
        /// </summary>
        /// <param name="val"></param>
        /// <returns></returns>
        public static bool toBoolean(string val)
        {
            val = val.Trim().ToLower();
            switch(val) {
                case "1":
                case VTRUE: {
                    return true;
                }
                case "0":
                case VFALSE: {
                    return false;
                }
            }
            throw new IncorrectSyntaxException("Values: incorrect boolean value - '{0}'", val);
        }

        /// <summary>
        /// Getting Int32 value
        /// </summary>
        /// <param name="val"></param>
        /// <returns></returns>
        public static int toInt32(string val)
        {
            return Int32.Parse(val.Trim());
        }

        /// <param name="val"></param>
        /// <returns></returns>
        public static string from(bool val)
        {
            return val.ToString().ToLower();
        }

        /// <param name="val"></param>
        /// <returns></returns>
        public static string from(List<string> val)
        {
            return String.Join(",", val);
        }

        /// <param name="val"></param>
        /// <returns></returns>
        public static string from(int val)
        {
            return val.ToString();
        }

        /// <summary>
        /// Comparing values
        /// </summary>
        /// <param name="left">Left operand</param>
        /// <param name="right">Right operand</param>
        /// <param name="coperator">Operator of comparison</param>
        /// <returns>Result of comparison</returns>
        public static bool cmp(string left, string right = VTRUE, string coperator = "===")
        {
            switch(coperator)
            {
                case "===": {
                    return (left == right);
                }
                case "!==": {
                    return (left != right);
                }
                case "~=": {
                    return (left.Contains(right));
                }
                case "==":
                {
                    int lNumber, rNumber;
                    if(Int32.TryParse(left, out lNumber) && Int32.TryParse(right, out rNumber)) {
                        return lNumber == rNumber;
                    }
                    return (left == right);
                }
                case "!=":
                {
                    int lNumber, rNumber;
                    if(Int32.TryParse(left, out lNumber) && Int32.TryParse(right, out rNumber)) {
                        return lNumber != rNumber;
                    }
                    return (left != right);
                }
                case ">": {
                    return (toInt32(left) > toInt32(right));
                }
                case ">=": {
                    return (toInt32(left) >= toInt32(right));
                }
                case "<": {
                    return (toInt32(left) < toInt32(right));
                }
                case "<=": {
                    return (toInt32(left) <= toInt32(right));
                }
            }
            throw new IncorrectSyntaxException("Values-comparison: incorrect operator - '{0}'", coperator);
        }
    }
}
