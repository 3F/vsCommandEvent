/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using net.r_eg.vsSBE.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts
{
    public class UserVariable: IUserVariable
    {
        /// <summary>
        /// Contains the all defined user-variables.
        /// 
        /// Note: ConcurrentDictionary used Nodes! order is unpredictable - see m_tables & internal adding
        /// http://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs
        /// https://bitbucket.org/3F/vssolutionbuildevent/commits/34cdc43df67#comment-1330734
        /// 
        /// Also variant use the both SynchronizedCollection/BlockingCollection + ConcurrentDictionary for O(1) operations
        /// </summary>
        protected Dictionary<string, TUserVariable> definitions = new Dictionary<string, TUserVariable>();

        /// <summary>
        /// object synch.
        /// </summary>
        private Object _lock = new Object();

        /// <summary>
        /// Getting value of user-variable
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name</param>
        /// <returns>evaluated value of variable or null if variable not defined</returns>
        public string get(string name, string project = null)
        {
            string defindex = defIndex(name, project);
            lock(_lock)
            {
                if(!definitions.ContainsKey(defindex)) {
                    return null;
                }
                string evaluated = definitions[defindex].evaluated;

                if(evaluated == null) {
                    Log.nlog.Debug("getValue: evaluated value of '{0}' is null", defindex);
                    evaluated = String.Empty;
                }
                return evaluated;
            }
        }

        /// <summary>
        /// Defines user-variable
        /// Value setted as unevaluated
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name or null if project is default</param>
        /// <param name="unevaluated">mixed string. Converted to empty string if value is null</param>
        public void set(string name, string project, string unevaluated)
        {
            if(!isValidName(name) || !isValidProject(project)) {
                throw new InvalidArgumentException("name - '{0}' or project - '{1}' is not valid for variable", name, project);
            }
            string defindex = defIndex(name, project);

            if(unevaluated == null) {
                unevaluated = String.Empty;
            }

            lock(_lock)
            {
                definitions[defindex] = new TUserVariable() {
                    unevaluated = unevaluated,
                    evaluated   = null
                };
                Log.nlog.Debug("User-variable: defined '{0}' = '{1}'", defindex, unevaluated);
            }
        }

        /// <summary>
        /// Evaluation user-variable with IMSBuild.
        /// Evaluated value should be updated for variable.
        /// </summary>
        /// <param name="name">Variable name for evaluating</param>
        /// <param name="project">Project name</param>
        /// <param name="msbuild">IMSBuild objects for evaluating</param>
        public void evaluate(string name, string project, MSBuild.IMSBuild msbuild)
        {
            string defindex = defIndex(name, project);
            lock(_lock)
            {
                if(!definitions.ContainsKey(defindex)) {
                    throw new NotFoundException("Variable '{0}' not found", defindex);
                }

                if(msbuild == null) {
                    throw new InvalidArgumentException("msbuild is null");
                }

                definitions[defindex] = new TUserVariable() {
                    unevaluated = definitions[defindex].unevaluated,
                    evaluated   = msbuild.parse(definitions[defindex].unevaluated)
                };
                Log.nlog.Debug("Completed evaluation variable :: '{0}'", defindex);
            }
        }

        /// <summary>
        /// Checking for variable - completed evaluation or not
        /// </summary>
        /// <param name="name">Variable name</param>
        /// <param name="project">Project name</param>
        /// <returns></returns>
        public bool isEvaluated(string name, string project)
        {
            return (definitions[defIndex(name, project)].evaluated != null);
        }

        /// <summary>
        /// Checking existence of variable
        /// </summary>
        /// <param name="name">Variable name</param>
        /// <param name="project">Project name</param>
        /// <returns></returns>
        public bool isExist(string name, string project)
        {
            return definitions.ContainsKey(defIndex(name, project));
        }

        /// <summary>
        /// Validation of variable name
        /// </summary>
        /// <param name="name">variable name</param>
        /// <returns>Is valid or not</returns>
        public virtual bool isValidName(string name)
        {
            if(String.IsNullOrEmpty(name)) {
                return false;
            }
            return Regex.Match(name, "^[a-z][a-z_0-9]*$", RegexOptions.IgnoreCase).Success;
        }

        /// <summary>
        /// Validation of project name
        /// </summary>
        /// <param name="project">project name</param>
        /// <returns>Is valid or not</returns>
        public virtual bool isValidProject(string project)
        {
            if(String.IsNullOrEmpty(project)) {
                return true;
            }
            //TODO:
            return true;
        }

        /// <summary>
        /// Remove user-variable
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name</param>
        /// <exception cref="ArgumentNullException">key is null</exception>
        public void unset(string name, string project)
        {
            lock(_lock)
            {
                if(definitions.Remove(name)) {
                    Log.nlog.Debug("User-variable is successfully unset '{0}'", name);
                    return;
                }
            }
            Log.nlog.Debug("Cannot unset the user-variable '{0}'", name);
        }

        /// <summary>
        /// Remove all user-variables
        /// </summary>
        public void unsetAll()
        {
            lock(_lock) {
                definitions.Clear();
            }
            Log.nlog.Debug("All User-variables is successfully reseted");
        }

        /// <summary>
        /// Exposes the enumerator for defined names of user-variables
        /// </summary>
        public IEnumerable<string> Variables
        {
            get {
                foreach(KeyValuePair<string, TUserVariable> def in definitions) {
                    yield return def.Key;
                }
            }
        }

        /// <summary>
        /// Used key-index for definitions
        /// </summary>
        protected string defIndex(string name, string project)
        {
            return String.Format("{0}:{1}", name, project);
        }
    }
}
