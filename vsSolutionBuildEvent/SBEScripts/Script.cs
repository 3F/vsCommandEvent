/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using net.r_eg.vsSBE.Exceptions;
using net.r_eg.vsSBE.SBEScripts.Components;

namespace net.r_eg.vsSBE.SBEScripts
{
    public class Script: ISBEScript
    {
        /// <summary>
        /// Work with user-variables
        /// </summary>
        protected IUserVariable uvariable = new UserVariable();

        /// <summary>
        /// Getting user-variable
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name</param>
        /// <returns>evaluated value of variable or null if variable not defined</returns>
        public string getVariable(string name, string project = null)
        {
            return uvariable.getVariable(name, project);
        }

        /// <summary>
        /// Define user-variable
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name or null if project is default</param>
        /// <param name="value">mixed string. Converted to empty string if value is null</param>
        public void setVariable(string name, string project, string value)
        {
            uvariable.setVariable(name, project, value);
        }

        /// <summary>
        /// Remove user-variable
        /// </summary>
        /// <param name="name">variable name</param>
        /// <param name="project">project name</param>
        /// <exception cref="ArgumentNullException">key is null</exception>
        public void unsetVariable(string name, string project)
        {
            uvariable.unsetVariable(name, project);
        }

        /// <summary>
        /// Remove all user-variables
        /// </summary>
        public void unsetVariables()
        {
            uvariable.unsetVariables();
        }

        /// <summary>
        /// Exposes the enumerator for defined names of user-variables
        /// </summary>
        public IEnumerable<string> Variables
        {
            get {
                return uvariable.Variables;
            }
        }

        /// <summary>
        /// Handler of mixed data SBE-Scripts
        /// Format: https://bitbucket.org/3F/vssolutionbuildevent/issue/22/#comment-12739932
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared & evaluated data</returns>
        public string parse(string data)
        {
            /*
                    (
                      \#{1,2}
                    )
                    (?=
                      (
                        \[
                          (?>
                            [^\[\]]
                            |
                            (?2)
                          )*
                        \]
                      )
                    )            -> for .NET: v
             */
            return Regex.Replace(data, @"(
                                            \#{1,2}   #1 - # or ##
                                          )
                                          (           #2 - mixed data of SBE-Script
                                            \[
                                              (?>
                                                [^\[\]]
                                                |
                                                \[(?<R>)
                                                |
                                                \](?<-R>)
                                              )*
                                              (?(R)(?!))
                                            \]
                                          )", 
            delegate(Match m)
            {
                if(m.Groups[1].Value.Length > 1) { //escape
                    Log.nlog.Debug("SBEScripts: escape - '{0}'", m.Groups[1].Value);
                    return m.Value.Substring(1);
                }
                Log.nlog.Debug("SBEScripts-data: '{0}'", data);
                return selector(m.Groups[2].Value);
            }, 
            RegexOptions.IgnorePatternWhitespace);
        }

        /// <summary>
        /// Work with SBE-Script by components
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared & evaluated data</returns>
        protected string selector(string data)
        {
            if(data.StartsWith("[var "))
            {
                Log.nlog.Debug("SBEScripts-selector: use UserVariableComponent");
                UserVariableComponentResult res = (new UserVariableComponent()).parse(data);
                uvariable.setVariable(res.name, res.project, res.value);
                return String.Empty;
            }

            if(data.StartsWith("[OWP ")) {
                Log.nlog.Debug("SBEScripts-selector: use OWPComponent");
                return (new OWPComponent()).parse(data);
            }

            if(data.StartsWith("[File ")) {
                Log.nlog.Debug("SBEScripts-selector: use FileComponent");
                return (new FileComponent()).parse(data);
            }

            throw new SelectorMismatchException("input data: '{0}'", data);
        }
    }
}
