/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using net.r_eg.vsSBE.Exceptions;
using net.r_eg.vsSBE.SBEScripts.Components;
using net.r_eg.vsSBE.SBEScripts.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts
{
    public class Script: ISBEScript, IEvaluator
    {
        /// <summary>
        /// Maximum of nesting level
        /// </summary>
        const int DEPTH_LIMIT = 70;

        /// <summary>
        /// General container of SBE-Script
        /// </summary>
        public string ContainerPattern
        {
            get
            {
                /*
                     (
                       \#{1,2}
                     )
                     (?=
                       (
                         \[
                           (?>
                             [^\[\]]
                             |
                             (?2)
                           )*
                         \]
                       )
                     )            -> for .NET: v
                */
                 return @"(
                            \#{1,2}   #1 - # or ##
                          )
                          (           #2 - mixed data of SBE-Script
                            \[
                              (?>
                                [^\[\]]
                                |
                                \[(?<R>)
                                |
                                \](?<-R>)
                              )*
                              (?(R)(?!))
                            \]
                          )";
            }
        }

        /// <summary>
        /// Work with user-variables
        /// </summary>
        protected IUserVariable uvariable;

        /// <summary>
        /// Provides operation with environment
        /// </summary>
        protected IEnvironment env;

        /// <summary>
        /// Basic operations with strings
        /// </summary>
        protected StringHandler hString;

        /// <summary>
        /// Flag of required post-processing with MSBuild core.
        /// In general, some components can require immediate processing with evaluation, before passing control to next level
        /// (e.g. FileComponent etc.) For such components need additional flag about allowed processing, if this used of course...
        /// </summary>
        protected bool postProcessingMSBuild;

        /// <summary>
        /// Current level of nesting data.
        /// Aborting if reached limit
        /// </summary>
        private volatile int _depthLevel = 0;

        /// <summary>
        /// Used components
        /// </summary>
        private FileComponent _cFile;
        private OWPComponent _cOWP;
        private DTEComponent _cDTE;
        private BuildComponent _cBuild;
        private ConditionComponent _cCondition;
        private InternalComponent _cInternal;
        private CommentComponent _cComment;
        private UserVariableComponent _cUVariable;

        /// <summary>
        /// object synch.
        /// </summary>
        private Object _lock = new Object();

        /// <summary>
        /// Handler of mixed data SBE-Scripts
        /// Format: https://bitbucket.org/3F/vssolutionbuildevent/issue/22/#comment-12739932
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <param name="allowMSBuild">Allows post-processing with MSBuild or not.
        /// Some components can require immediate processing with evaluation, before passing control to next level.
        /// </param>
        /// <returns>prepared and evaluated data</returns>
        public string parse(string data, bool allowMSBuild)
        {
            lock(_lock)
            {
                _depthLevel = 0;
                postProcessingMSBuild = allowMSBuild;
                StringHandler hString = new StringHandler();
                return hString.recovery(parse(hString.protect(data), _depthLevel, hString));
            }
        }

        public string parse(string data)
        {
            return parse(data, false);
        }

        /// <summary>
        /// Evaluating data with current object
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>Evaluated end value</returns>
        public string evaluate(string data)
        {
            return parse(data);
        }

        /// <param name="env">Used environment</param>
        /// <param name="uvariable">Used instance of user-variable</param>
        public Script(IEnvironment env, IUserVariable uvariable)
        {
            this.env = env;
            this.uvariable = uvariable;
        }

        /// <param name="data">Mixed data</param>
        /// <param name="level">Nesting level</param>
        /// <param name="hString">Handler of strings if exist</param>
        /// <returns>Prepared & evaluated data</returns>
        protected string parse(string data, int level, StringHandler hString = null)
        {
            if(level >= DEPTH_LIMIT) {
                throw new LimitException("Nesting level of '{0}' reached. Aborted.", level);
            }

            return Regex.Replace(data, ContainerPattern, delegate(Match m)
            {
                if(m.Groups[1].Value.Length > 1) { //escape
                    Log.nlog.Debug("SBEScripts: escape - '{0}'", m.Groups[1].Value);
                    return m.Value.Substring(1);
                }
                string raw = m.Groups[2].Value;

                Log.nlog.Debug("SBEScripts-data: to parse '{0}'", raw);
                if(hString != null) {
                    return selector(hString.recovery(raw));
                }
                return selector(raw);
            }, 
            RegexOptions.IgnorePatternWhitespace);
        }

        /// <summary>
        /// Work with SBE-Script by components
        /// TODO: Decorator pattern or similar
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared & evaluated data</returns>
        protected string selector(string data)
        {
            Log.nlog.Debug("SBEScripts-selector: started with '{0}'", data);

            if(data.StartsWith("[\"")) {
                Log.nlog.Debug("SBEScripts-selector: use CommentComponent");
                if(_cComment == null) {
                    _cComment = new CommentComponent();
                }
                return _cComment.parse(data);
            }

            if(data.StartsWith("[("))
            {
                Log.nlog.Debug("SBEScripts-selector: use ConditionComponent");
                if(_cCondition == null) {
                    _cCondition = new ConditionComponent(env, uvariable);
                }
                ++_depthLevel;
                data = parse(_cCondition.parse(data), _depthLevel);
                --_depthLevel;
                return data;
            }

            if(deepen(ref data)) {
                ++_depthLevel;
                data = parse(data, _depthLevel);
                --_depthLevel;
            }

            if(data.StartsWith("[var "))
            {
                Log.nlog.Debug("SBEScripts-selector: use UserVariableComponent");
                if(_cUVariable == null) {
                    _cUVariable = new UserVariableComponent(env, uvariable);
                }
                _cUVariable.PostProcessingMSBuild = postProcessingMSBuild;
                return _cUVariable.parse(data);
            }

            return elements(ref data);
        }

        /// <summary>
        /// TODO: Decorator pattern or similar
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        protected string elements(ref string data)
        {
            if(data.StartsWith("[OWP "))
            {
                Log.nlog.Debug("SBEScripts-selector: use OWPComponent");
                if(_cOWP == null) {
                    _cOWP = new OWPComponent();
                }
                return _cOWP.parse(data);
            }

            if(data.StartsWith("[DTE "))
            {
                Log.nlog.Debug("SBEScripts-selector: use DTEComponent");
                if(_cDTE == null) {
                    _cDTE = new DTEComponent(env);
                }
                return _cDTE.parse(data);
            }

            if(data.StartsWith("[vsSBE "))
            {
                Log.nlog.Debug("SBEScripts-selector: use InternalComponent");
                if(_cInternal == null) {
                    _cInternal = new InternalComponent();
                }
                return _cInternal.parse(data);
            }

            if(data.StartsWith("[Build ")) {
                Log.nlog.Debug("SBEScripts-selector: use BuildComponent");
                if(_cBuild == null) {
                    _cBuild = new BuildComponent(env);
                }
                return _cBuild.parse(data);
            }

            if(data.StartsWith("[File "))
            {
                Log.nlog.Debug("SBEScripts-selector: use FileComponent");
                if(_cFile == null) {
                    _cFile = new FileComponent();
                }
                return _cFile.parse(data);
            }

            throw new SelectorMismatchException("SBEScripts-selector: not found component for handling - '{0}'", data);
        }

        protected bool deepen(ref string data)
        {
            return Regex.Match(data, ContainerPattern, RegexOptions.IgnorePatternWhitespace).Success;
        }
    }
}
