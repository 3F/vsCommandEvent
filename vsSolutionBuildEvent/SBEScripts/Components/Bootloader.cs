/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using net.r_eg.vsSBE.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts.Components
{
    public static class Bootloader
    {
        /// <summary>
        /// All registered components
        /// </summary>
        public static IEnumerable<IComponent> Components
        {
            get {
                foreach(KeyValuePair<string, IComponent> component in components) {
                    yield return component.Value;
                }
            }
        }
        private static ConcurrentDictionary<string, IComponent> components = new ConcurrentDictionary<string, IComponent>();

        /// <param name="env">Used environment</param>
        /// <param name="uvariable">Used instance of user-variable</param>
        public static void init(IEnvironment env, IUserVariable uvariable)
        {
            register(new CommentComponent());
            register(new ConditionComponent(env, uvariable));
            register(new UserVariableComponent(env, uvariable));
            register(new OWPComponent());
            register(new DTEComponent(env));
            register(new InternalComponent());
            register(new BuildComponent(env));
            register(new FileComponent());
        }

        private static void register(IComponent c)
        {
            string ident = c.Condition;
            if(String.IsNullOrEmpty(ident) || components.ContainsKey(ident)) {
                throw new ComponentException("IComponent '{0}:{1}' is empty or is already registered", ident, c.ToString());
            }
            components[ident] = c;
        }
    }
}
