/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using net.r_eg.vsSBE.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts.Components
{
    public class UserVariableComponent: IComponent<UserVariableComponentResult>
    {
        /// <summary>
        /// Type of implementation
        /// </summary>
        public ComponentType Type
        {
            get { return ComponentType.UserVariable; }
        }

        /// <summary>
        /// Handling with current type
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared and evaluated data</returns>
        public UserVariableComponentResult parse(string data)
        {
            Match m = Regex.Match(data, @"^\[var
                                              \s+
                                              ([A-Za-z_0-9]+)  #1 - name 
                                              (?:
                                                :([^=]*)       #2 - project (optional)
                                              )?
                                              \s*=\s*
                                              (.+)             #3 - mixed data
                                           \]$", 
                                           RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                throw new SyntaxIncorrectException("Failed UserVariableComponent - '{0}'", data);
            }

            string pname = null;
            if(m.Groups[2].Success)
            {
                pname = m.Groups[2].Value.Trim();
                if(pname.Length < 1) {
                    pname = null;
                }
            }

            return new UserVariableComponentResult() {
                name    = m.Groups[1].Value,
                project = pname,
                value   = m.Groups[3].Value
            };
        }
    }

    /// <summary>
    /// Result type for User-Variable
    /// </summary>
    public struct UserVariableComponentResult
    {
        /// <summary>
        /// Found name
        /// </summary>
        public string name;

        /// <summary>
        /// Found project
        /// </summary>
        public string project;

        /// <summary>
        /// Found value
        /// </summary>
        public string value;
    }
}
