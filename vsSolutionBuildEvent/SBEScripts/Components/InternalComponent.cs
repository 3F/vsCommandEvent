/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using net.r_eg.vsSBE.Actions;
using net.r_eg.vsSBE.Events;
using net.r_eg.vsSBE.Exceptions;
using net.r_eg.vsSBE.SBEScripts.Exceptions;

namespace net.r_eg.vsSBE.SBEScripts.Components
{
    public class InternalComponent: IComponent
    {
        /// <summary>
        /// Type of implementation
        /// </summary>
        public ComponentType Type
        {
            get { return ComponentType.Internal; }
        }

        /// <summary>
        /// Handling with current type
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared and evaluated data</returns>
        public string parse(string data)
        {
            Match m = Regex.Match(data, @"^\[vsSBE
                                              \s+
                                              (                  #1 - full ident
                                                ([A-Za-z_0-9]+)  #2 - subtype
                                                .*
                                              )
                                           \]$", 
                                           RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                throw new SyntaxIncorrectException("Failed InternalComponent - '{0}'", data);
            }

            switch(m.Groups[2].Value) {
                case "events": {
                    Log.nlog.Debug("InternalComponent: use stEvents");
                    return stEvents(m.Groups[1].Value);
                }
            }
            throw new SubtypeNotFoundException("InternalComponent: not found subtype - '{0}'", m.Groups[2].Value);
        }

        /// <summary>
        /// Work with events subtype
        /// #[vsSBE events.Type.item("name")]
        /// #[vsSBE events.Type.item(index)]
        /// e.g.: 
        /// #[vsSBE events.Pre.item("Act1")]
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        protected string stEvents(string data)
        {
            Match m = Regex.Match(data,
                                    String.Format(@"events
                                                      \s*\.\s*
                                                      ([A-Za-z]+)       #1 - Event Type
                                                      \s*\.\s*
                                                      item
                                                      \s*
                                                      \(
                                                        (?:
                                                          (\s*\d+\s*)   #2 - item by index
                                                         |
                                                          {0}           #3 - item by name
                                                        )
                                                      \)
                                                      \s*(.+)           #4 - operation with item
                                                    ", RPattern.DoubleQuotesContent
                                                 ), RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                throw new OperandNotFoundException("Failed stEvents - '{0}'", data);
            }

            string typeString   = m.Groups[1].Value;
            string index        = (m.Groups[2].Success)? m.Groups[2].Value : null;
            string name         = (m.Groups[3].Success)? m.Groups[3].Value : null;
            string operation    = m.Groups[4].Value;

            SolutionEventType type;
            try {
                type = (SolutionEventType)Enum.Parse(typeof(SolutionEventType), typeString);
            }
            catch(Exception ex) {
                throw new NotFoundException("Event type not found - '{0}' :: ", typeString, ex.Message);
            }

            Log.nlog.Debug("stEvents: type - '{0}', index - '{1}', name - '{2}'", type, index, name);
            return stEventItem(type, index, name, operation);
        }

        /// <summary>
        /// Work with event-item
        /// #[vsSBE events.Pre.item("Act1").Enabled]
        /// #[vsSBE events.Pre.item("Act1").Status]
        /// </summary>
        /// <param name="type">Type of available events</param>
        /// <param name="index">access by index if used or null value</param>
        /// <param name="name">access by name if used or null value</param>
        /// <param name="data">Operation with event-item</param>
        /// <returns>evaluated data</returns>
        protected string stEventItem(SolutionEventType type, string index, string name, string data)
        {
            Debug.Assert((index == null && name != null) || (index != null && name == null));

            Match m = Regex.Match(data,
                                    String.Format(@"\.\s*
                                                    ([A-Za-z_0-9]+)  #1 - property
                                                    (?:
                                                      \s*\(  
                                                      {0}            #2 - arg (optional)
                                                      \)\s*
                                                    )?
                                                    \s*(.*)          #3 - operation
                                                   ", RPattern.DoubleQuotesContent
                                                 ), RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                throw new OperandNotFoundException("Failed stEventItem - '{0}'", data);
            }

            string property     = m.Groups[1].Value;
            string operation    = m.Groups[3].Value.Trim();

            Log.nlog.Debug("stEventItem: property - '{0}', operation - '{1}'", property, operation);
            int sIndex = -1;
            ISolutionEvent evt = (name != null)? getEventByName(type, name, out sIndex) : getEventByIndex(type, index, out sIndex);

            switch(property)
            {
                case "Enabled": {
                    return pEnabled(evt, operation);
                }
                case "Status": {
                    return pStatus(type, sIndex, operation);
                }
            }
            throw new SubtypeNotFoundException("stEventItem: not found subtype - '{0}'", property);
        }

        /// <summary>
        /// Work with 'Status' property for selected ISolutionEvent
        /// #[vsSBE events.Pre.item("Act1").Status.HasErrors]
        /// </summary>
        /// <param name="type">Selected event type</param>
        /// <param name="index">access by index</param>
        /// <param name="data">String data with operations</param>
        /// <returns></returns>
        protected string pStatus(SolutionEventType type, int index, string data)
        {
            Match m = Regex.Match(data, @"\.\s*
                                         ([A-Za-z_0-9]+)  #1 - property", 
                                         RegexOptions.IgnorePatternWhitespace);

            if(!m.Success) {
                throw new OperandNotFoundException("Failed pStatus - '{0}'", data);
            }

            string property = m.Groups[1].Value;
            if(property == "HasErrors")
            {
                string status = (Status._.get(type, index) == StatusType.Fail).ToString().ToLower();
                Log.nlog.Debug("pStatus: status - '{0}'", status);
                return status;
            }

            throw new SubtypeNotFoundException("pStatus: not found subtype - '{0}'", property);
        }

        /// <summary>
        /// Work with 'Enabled' property for selected ISolutionEvent
        /// get: #[vsSBE events.Pre.item("Act1").Enabled]
        /// set: #[vsSBE events.Pre.item("Act1").Enabled = false]
        /// </summary>
        /// <param name="evt">Selected event</param>
        /// <param name="data">String data with operations</param>
        /// <returns></returns>
        protected string pEnabled(ISolutionEvent evt, string data)
        {
            if(data.Trim().Length < 1) {
                return evt.Enabled.ToString().ToLower();
            }

            Match m = Regex.Match(data, @"=\s*(false|true|1|0)", RegexOptions.IgnoreCase);
            if(!m.Success) {
                throw new OperandNotFoundException("Failed pEnabled - '{0}'", data);
            }
            evt.Enabled = Values.toBoolean(m.Groups[1].Value);

            Log.nlog.Debug("pEnabled: setted as '{0}' for '{1}'", evt.Enabled, evt.Name);
            return String.Empty;
        }

        /// <param name="sIndex">Binding index with the Execution status</param>
        protected ISolutionEvent getEventByName(SolutionEventType type, string name, out int sIndex)
        {
            sIndex = -1;
            if(String.IsNullOrEmpty(name)) {
                throw new NotFoundException("getEventByName: name is null or empty");
            }
            ISolutionEvent[] evt = getEvent(type);

            foreach(ISolutionEvent item in evt) {
                ++sIndex;
                if(item.Name == name) {
                    return item;
                }
            }
            throw new NotFoundException("getEvent: not found name - '{0}' with type - '{1}'", name, type);
        }

        /// <param name="sIndex">Binding index with the Execution status</param>
        protected ISolutionEvent getEventByIndex(SolutionEventType type, string index, out int sIndex)
        {
            sIndex = -1;
            ISolutionEvent[] evt = getEvent(type);
            try {
                sIndex = Int32.Parse(index) - 1; // >= 1
                return evt[sIndex];
            }
            catch(Exception) {
                throw new NotFoundException("getEvent: incorrect index - '{0}'({1}) with type - '{2}'", index, evt.Length, type);
            }
        }

        protected virtual ISolutionEvent[] getEvent(SolutionEventType type)
        {
            switch(type) {
                case SolutionEventType.Pre: {
                    return Config._.Data.PreBuild;
                }
                case SolutionEventType.Post: {
                    return Config._.Data.PostBuild;
                }
                case SolutionEventType.Cancel: {
                    return Config._.Data.CancelBuild;
                }
                case SolutionEventType.Warnings: {
                    return Config._.Data.WarningsBuild;
                }
                case SolutionEventType.Errors: {
                    return Config._.Data.ErrorsBuild;
                }
                case SolutionEventType.OWP: {
                    return Config._.Data.OWPBuild;
                }
                case SolutionEventType.Transmitter: {
                    return Config._.Data.Transmitter;
                }
            }
            throw new NotSupportedOperationException("getEvent: Not yet supported event type - '{0}'", type);
        }
    }
}
