/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg [Denis Kuzmin] <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

namespace net.r_eg.vsSBE.SBEScripts.Components
{
    /// <typeparam name="T">result type for 'parse' method</typeparam>
    public interface IComponent<T>
    {
        /// <summary>
        /// Used type from available components
        /// </summary>
        ComponentType Type { get; }

        /// <summary>
        /// Handling with current type
        /// </summary>
        /// <param name="data">mixed data</param>
        /// <returns>prepared and evaluated data</returns>
        T parse(string data);
    }
    /// <summary>
    /// IComponent&lt;T&gt; By default
    /// </summary>
    public interface IComponent: IComponent<string> { }


    /// <summary>
    /// Type of available components
    /// </summary>
    public enum ComponentType
    {
        /// <summary>
        /// All internal operation with vsSBE
        /// </summary>
        Internal,
        /// <summary>
        /// For work with User-Variables
        /// </summary>
        UserVariable,
        /// <summary>
        /// Any supported comments with scripts
        /// </summary>
        Comment,
        /// <summary>
        /// Conditions in scripts
        /// </summary>
        Condition,
        /// <summary>
        /// Mixed supported functions
        /// </summary>
        Function,
        /// <summary>
        /// For work with OWP
        /// </summary>
        OWP,
        /// <summary>
        /// For work with DTE
        /// </summary>
        DTE,
        /// <summary>
        /// Support file operations
        /// I/O, call, etc.
        /// </summary>
        File,
        /// <summary>
        /// Components of building
        /// </summary>
        Build,
    }
}
