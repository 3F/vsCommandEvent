/* 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Copyright (c) 2013-2014 Developed by reg <entry.reg@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE. 
*/

using System;
using Newtonsoft.Json;

namespace net.r_eg.vsSBE.Events
{
    public class SBEEvent: ISolutionEvent
    {
        /// <summary>
        /// Status of activation
        /// </summary>
        public bool Enabled
        {
            get { return enabled; }
            set { enabled = value; }
        }
        private bool enabled = false;

        /// <summary>
        /// Optional, unique name for manually identification
        /// </summary>
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        private string name = null;

        /// <summary>
        /// Short header about this
        /// </summary>
        public string Caption
        {
            get { return caption; }
            set { caption = value; }
        }
        private string caption = String.Empty;
        
        /// <summary>
        /// Support of MSBuild environment variables (properties)
        /// </summary>
        public bool SupportMSBuild
        {
            get { return supportMSBuild; }
            set { supportMSBuild = value; }
        }
        private bool supportMSBuild = true;

        /// <summary>
        /// Support of SBE-Scripts
        /// </summary>
        public bool SupportSBEScripts
        {
            get { return supportSBEScripts; }
            set { supportSBEScripts = value; }
        }
        private bool supportSBEScripts = true;

        /// <summary>
        /// Ignore all actions if the build failed
        /// </summary>
        public bool IgnoreIfBuildFailed
        {
            get { return ignoreIfBuildFailed; }
            set { ignoreIfBuildFailed = value; }
        }
        private bool ignoreIfBuildFailed = false;

        /// <summary>
        /// Run only for a specific configuration of solution
        /// strings format as:
        ///   'configname'|'platformname'
        ///   Compatible with: http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.shell.interop.ivscfg.get_displayname.aspx
        /// </summary>
        public string[] ToConfiguration
        {
            get { return toConfiguration; }
            set { toConfiguration = value; }
        }
        private string[] toConfiguration = null;
        
        /// <summary>
        /// Run for selected projects with the Execution-Order
        /// </summary>
        [JsonProperty(TypeNameHandling = TypeNameHandling.All)]
        public IExecutionOrder[] ExecutionOrder
        {
            get { return executionOrder; }
            set { executionOrder = (ExecutionOrder[])value; }
        }
        private ExecutionOrder[] executionOrder = null;

        /// <summary>
        /// Handling process
        /// </summary>
        [JsonProperty(TypeNameHandling = TypeNameHandling.All)]
        public IEventProcess Process
        {
            get { return process; }
            set { process = (EventProcess)value; }
        }
        private EventProcess process = new EventProcess();

        /// <summary>
        /// Available mode
        /// </summary>
        [JsonProperty(TypeNameHandling = TypeNameHandling.All)]
        public IMode Mode
        {
            get { return mode; }
            set { mode = value; }
        }
        private IMode mode = new ModeFile();
    }
}
